<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1571209243542" ID="ID_657989435" MODIFIED="1571212909313" STYLE="bubble" TEXT="&#x7b97;&#x6cd5;&#x5b66;&#x4e60;">
<node CREATED="1571212890453" FOLDED="true" ID="ID_1504134120" MODIFIED="1572857785088" POSITION="right" TEXT="&#x52a8;&#x6001;&#x89c4;&#x5212;">
<node CREATED="1571212918994" FOLDED="true" ID="ID_742693092" MODIFIED="1572857784446" TEXT="&#x56fa;&#x5b9a;&#x6d41;&#x7a0b;">
<node CREATED="1571212924978" ID="ID_1499227295" MODIFIED="1571212935588" TEXT="&#x9012;&#x5f52;&#x7684;&#x66b4;&#x529b;&#x89e3;&#x6cd5; -&gt; &#x5e26;&#x5907;&#x5fd8;&#x5f55;&#x7684;&#x9012;&#x5f52;&#x89e3;&#x6cd5; -&gt; &#x975e;&#x9012;&#x5f52;&#x7684;&#x52a8;&#x6001;&#x89c4;&#x5212;&#x89e3;&#x6cd5;">
<node CREATED="1571213010969" ID="ID_362883239" MODIFIED="1571213021919" TEXT="&#x9012;&#x5f52;&#x7684;&#x81ea;&#x9876;&#x5411;&#x4e0b;">
<node CREATED="1571213022633" ID="ID_1895886797" MODIFIED="1571213046290">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26159;&#20174;&#19978;&#21521;&#19979;&#24310;&#20280;&#65292;&#37117;&#26159;&#20174;&#19968;&#20010;&#35268;&#27169;&#36739;&#22823;&#30340;&#21407;&#38382;&#39064;
    </p>
    <p>
      &#27604;&#22914;&#35828; f(20)&#65292;&#21521;&#19979;&#36880;&#28176;&#20998;&#35299;&#35268;&#27169;&#65292;&#30452;&#21040; f(1) &#21644;
    </p>
    <p>
      &#160;f(2) &#35302;&#24213;&#65292;&#28982;&#21518;&#36880;&#23618;&#36820;&#22238;&#31572;&#26696;&#65292;&#36825;&#23601;&#21483;&#12300;&#33258;&#39030;&#21521;&#19979;&#12301;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1571213049537" ID="ID_1774270003" MODIFIED="1571213061158" TEXT="&#x52a8;&#x6001;&#x89c4;&#x5212;&#x7684;&#x81ea;&#x5e95;&#x5411;&#x4e0a;">
<node CREATED="1571213079145" ID="ID_1940575372" MODIFIED="1571213096093">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25105;&#20204;&#30452;&#25509;&#20174;&#26368;&#24213;&#19979;&#65292;&#26368;&#31616;&#21333;&#65292;&#38382;&#39064;&#35268;&#27169;&#26368;&#23567;&#30340; f(1) &#21644; f(2) &#24320;&#22987;&#24448;&#19978;&#25512;&#65292;
    </p>
    <p>
      &#30452;&#21040;&#25512;&#21040;&#25105;&#20204;&#24819;&#35201;&#30340;&#31572;&#26696; f(20)&#65292;&#36825;&#23601;&#26159;&#21160;&#24577;&#35268;&#21010;&#30340;&#24605;&#36335;&#65292;&#36825;&#20063;&#26159;&#20026;&#20160;
    </p>
    <p>
      &#20040;&#21160;&#24577;&#35268;&#21010;&#19968;&#33324;&#37117;&#33073;&#31163;&#20102;&#36882;&#24402;&#65292;&#32780;&#26159;&#30001;&#24490;&#29615;&#36845;&#20195;&#23436;&#25104;&#35745;&#31639;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1571213221720" FOLDED="true" HGAP="18" ID="ID_660275031" MODIFIED="1572848254728" TEXT="&#x72b6;&#x6001;&#x8f6c;&#x79fb;&#x65b9;&#x7a0b;" VSHIFT="-1">
<node CREATED="1571213236200" ID="ID_1673935409" MODIFIED="1571213312757" TEXT="&#x5373;&#x662f;&#x7b49;&#x5f0f;&#xff0c;&#x8bf4;&#x660e;&#x95ee;&#x9898;&#x6240;&#x6c42;&#x7684;f(n)&#x4e0e;f(n-1)&#x7b49;&#x7684;&#x7b49;&#x5f0f;&#x95ee;&#x9898;"/>
</node>
</node>
<node CREATED="1571213156992" FOLDED="true" ID="ID_1487593243" MODIFIED="1572848260464" POSITION="left" TEXT="&#x8bed;&#x5f55;">
<node CREATED="1571213160296" ID="ID_1214444122" MODIFIED="1571213161406" TEXT="&#x7b97;&#x6cd5;&#x8bbe;&#x8ba1;&#x65e0;&#x975e;&#x5c31;&#x662f;&#x5148;&#x601d;&#x8003;&#x201c;&#x5982;&#x4f55;&#x7a77;&#x4e3e;&#x201d;&#xff0c;&#x7136;&#x540e;&#x518d;&#x8ffd;&#x6c42;&#x201c;&#x5982;&#x4f55;&#x806a;&#x660e;&#x5730;&#x7a77;&#x4e3e;&#x201d;&#x3002;"/>
</node>
<node CREATED="1572849304323" ID="ID_479265951" MODIFIED="1572849311219" POSITION="right" TEXT="&#x6811;">
<node CREATED="1572849342806" ID="ID_477306374" MODIFIED="1572849380710" TEXT="&#x9884;&#x5907;&#x77e5;&#x8bc6;">
<node CREATED="1572849381230" ID="ID_421464021" MODIFIED="1572849423060" TEXT="&#x6811;&#x7684;&#x5b9a;&#x4e49;&#x65b9;&#x5f0f;">
<node CREATED="1572849425102" ID="ID_479504153" MODIFIED="1572849437820" TEXT="&#x4e00;&#x79cd;&#x81ea;&#x7136;&#x7684;&#x65b9;&#x5f0f;&#x662f;&#x9012;&#x5f52;&#x7684;&#x65b9;&#x5f0f;"/>
</node>
<node CREATED="1572849441478" ID="ID_218250822" MODIFIED="1572849451995" TEXT="&#x6811;&#x7684;&#x6982;&#x5ff5;">
<node CREATED="1572849453925" ID="ID_607654203" MODIFIED="1572849579815">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#26869;&#26641;&#26159;&#19968;&#20123;&#33410;&#28857;&#30340;&#38598;&#21512;&#65292;&#21487;&#20197;&#20026;&#31354;&#65292;&#33509;&#19981;&#20026;&#31354;&#65292;&#21017;&#26641;&#30001;&#31216;&#20316;&#26681;&#30340;&#33410;&#28857;r&#20197;&#21450;
    </p>
    <p>
      0&#20010;&#25110;&#22810;&#20010;&#38750;&#31354;&#23376;&#26641;&#32452;&#25104;&#65292;&#36825;&#20123;&#23376;&#26641;&#34987;&#26469;&#33258;&#26681;&#30340;&#19968;&#26465;&#26377;&#21521;&#30340;&#36793;&#25152;&#36830;&#25509;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572849614468" ID="ID_251433494" MODIFIED="1572849656492">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20174;&#36882;&#24402;&#23450;&#20041;&#20013;&#21457;&#29616;&#65292;&#19968;&#26869;&#26641;&#26159;N&#20010;&#33410;&#28857;&#21644;N-1&#26465;&#36793;&#30340;&#38598;&#21512;&#65292;&#20854;&#20013;&#19968;&#20010;
    </p>
    <p>
      &#33410;&#28857;&#21483;&#20570;&#26681;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572849886434" ID="ID_772092680" MODIFIED="1572918053149" TEXT="&#x6811;&#x7684;&#x6027;&#x8d28;">
<node CREATED="1572918044986" ID="ID_1348553303" MODIFIED="1572918167216">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26641;&#30340;<b>&#24230;</b>&#26159;&#22914;&#19979;&#23450;&#20041;&#30340;&#65306;&#26377;&#26681;&#26641;T&#20013;&#65292;&#32467;&#28857;x&#30340;&#23376;&#22899;&#25968;&#30446;&#31216;&#20026;x&#30340;&#24230;
    </p>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      &#19968;&#20010;&#26377;&#29992;&#30340;&#23567;&#20844;&#24335;&#65306;&#26641;&#20013;&#32467;&#28857;&#25968; = &#24635;&#20998;&#21449;&#25968; +1&#12290;(&#36825;&#37324;&#30340;&#20998;&#21449;&#25968;&#23601;&#26159;&#25152;&#26377;&#32467;&#28857;&#30340;&#24230;&#20043;&#21644;)
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572849961193" ID="ID_1992075112" MODIFIED="1572850080024">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20174;&#33410;&#28857;n1&#21040;nk&#30340;&#36335;&#24452;&#23450;&#20041;&#20026;n1&#65292;n2&#65292;n3....nk&#30340;&#19968;&#20010;&#24207;&#21015;&#65292;&#36825;&#26465;
    </p>
    <p>
      &#36335;&#24452;&#30340;&#38271;&#26159;&#35813;&#36335;&#24452;&#19978;&#30340;&#36793;&#30340;&#26465;&#25968;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572850160097" ID="ID_1931456194" MODIFIED="1572850365209">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20219;&#24847;&#33410;&#28857;nj&#30340;<b>&#28145;&#24230;</b>&#20026;&#20174;&#26681;&#21040;nj&#30340;&#21807;&#19968;&#30340;&#36335;&#24452;&#30340;&#38271;&#12290;&#22240;&#27492;&#26681;&#30340;&#28145;&#24230;&#20026;0&#12290;
    </p>
    <p>
      &#33410;&#28857;nj&#30340;<b>&#39640;</b>&#26159;&#20174;nj&#21040;&#19968;&#29255;&#26641;&#21494;&#30340;&#26368;&#38271;&#30340;&#36335;&#24452;&#30340;&#38271;&#12290;&#22240;&#27492;&#25152;&#26377;&#26641;&#21494;&#30340;&#39640;
    </p>
    <p>
      &#20026;0&#65292;&#19968;&#26869;&#26641;&#30340;&#39640;&#31561;&#20110;&#23427;&#26681;&#30340;&#39640;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572918716939" ID="ID_1941871324" MODIFIED="1572918723872" TEXT="&#x57fa;&#x672c;&#x672f;&#x8bed;">
<node CREATED="1572918724490" ID="ID_89877805" MODIFIED="1572918740970">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#19968;&#20010;&#32467;&#28857;&#26377;&#23376;&#26641;&#65292;&#37027;&#20040;&#35813;&#32467;&#28857;&#31216;&#20026;&#23376;&#26641;&#26681;&#30340;&quot;&#21452;&#20146;&quot;&#65292;&#23376;&#26641;&#30340;&#26681;&#26159;&#35813;&#32467;&#28857;&#30340;&quot;&#23401;&#23376;&quot;&#12290;&#26377;&#30456;&#21516;&#21452;&#20146;&#30340;&#32467;&#28857;&#20114;&#20026;&quot;&#20804;&#24351;&quot;&#12290;&#19968;&#20010;&#32467;&#28857;&#30340;&#25152;&#26377;&#23376;&#26641;&#19978;&#30340;&#20219;&#20309;&#32467;&#28857;&#37117;&#26159;&#35813;&#32467;&#28857;&#30340;&#21518;&#35028;&#12290;&#20174;&#26681;&#32467;&#28857;&#21040;&#26576;&#20010;&#32467;&#28857;&#30340;&#36335;&#24452;&#19978;&#30340;&#25152;&#26377;&#32467;&#28857;&#37117;&#26159;&#35813;&#32467;&#28857;&#30340;&#31062;&#20808;&#12290;</font>
    </p>
    <p>
      <strong><font size="3" color="#000000">&#32467;&#28857;&#30340;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#32467;&#28857;&#25317;&#26377;&#30340;&#23376;&#26641;&#30340;&#25968;&#30446;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#21494;&#23376;</font></strong><font size="3" color="#000000">&#65306;&#24230;&#20026;&#38646;&#30340;&#32467;&#28857;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#20998;&#25903;&#32467;&#28857;</font></strong><font size="3" color="#000000">&#65306;&#24230;&#19981;&#20026;&#38646;&#30340;&#32467;&#28857;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26641;&#30340;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#26641;&#20013;&#32467;&#28857;&#30340;&#26368;&#22823;&#30340;&#24230;&#12290;</font>
    </p>
    <p>
      <strong><font size="3" color="#000000">&#23618;&#27425;</font></strong><font size="3" color="#000000">&#65306;&#26681;&#32467;&#28857;&#30340;&#23618;&#27425;&#20026;1&#65292;&#20854;&#20313;&#32467;&#28857;&#30340;&#23618;&#27425;&#31561;&#20110;&#35813;&#32467;&#28857;&#30340;&#21452;&#20146;&#32467;&#28857;&#30340;&#23618;&#27425;&#21152;1&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26641;&#30340;&#39640;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#26641;&#20013;&#32467;&#28857;&#30340;&#26368;&#22823;&#23618;&#27425;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26080;&#24207;&#26641;</font></strong><font size="3" color="#000000">&#65306;&#22914;&#26524;&#26641;&#20013;&#32467;&#28857;&#30340;&#21508;&#23376;&#26641;&#20043;&#38388;&#30340;&#27425;&#24207;&#26159;&#19981;&#37325;&#35201;&#30340;&#65292;&#21487;&#20197;&#20132;&#25442;&#20301;&#32622;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26377;&#24207;&#26641;</font></strong><font size="3" color="#000000">&#65306;&#22914;&#26524;&#26641;&#20013;&#32467;&#28857;&#30340;&#21508;&#23376;&#26641;&#20043;&#38388;&#30340;&#27425;&#24207;&#26159;&#37325;&#35201;&#30340;, &#19981;&#21487;&#20197;&#20132;&#25442;&#20301;&#32622;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26862;&#26519;</font></strong><font size="3" color="#000000">&#65306;0&#20010;&#25110;&#22810;&#20010;&#19981;&#30456;&#20132;&#30340;&#26641;&#32452;&#25104;&#12290;&#23545;&#26862;&#26519;&#21152;&#19978;&#19968;&#20010;&#26681;&#65292;&#26862;&#26519;&#21363;&#25104;&#20026;&#26641;&#65307;&#21024;&#21435;&#26681;&#65292;&#26641;&#21363;&#25104;&#20026;&#26862;&#26519;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572850445791" ID="ID_903737197" MODIFIED="1572850468572" TEXT="&#x7956;&#x5148;&#x3001;&#x540e;&#x88d4;&#xff1b;&#x771f;&#x7956;&#x5148;&#x3001;&#x771f;&#x540e;&#x88d4;">
<node CREATED="1572850469295" ID="ID_1578533732" MODIFIED="1572850545173">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#33509;&#23384;&#22312;&#20174;n1&#21040;n2.&#30340;&#19968;&#26465;&#36335;&#24452;&#65292;&#37027;&#20040;n1&#20026;n2&#30340;&#19968;&#20301;&#31062;&#20808;&#65307;
    </p>
    <p>
      &#33509;n1&#8800;n2&#65292;&#21017;n1&#26159;n2&#30340;&#30495;&#31062;&#20808;&#65292;&#21518;&#35028;&#21516;&#29702;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node COLOR="#006699" CREATED="1572850551846" ID="ID_736783424" MODIFIED="1572850998428" TEXT="&#x6811;&#x7684;&#x5b9e;&#x73b0;">
<node CREATED="1572851120387" ID="ID_849621222" MODIFIED="1573002801735" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1572851229202" ID="ID_761200139" MODIFIED="1572851347975">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct TreeNode
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;Object&#160;&#160;&#160;element;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;TreeNode&#160;&#160;*firstChild;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;TreeNode&#160;&#160;*nextSibling;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572851123995" FOLDED="true" ID="ID_781508031" MODIFIED="1573002811583" TEXT="&#x7b2c;&#x4e00;&#x513f;&#x5b50;/&#x4e0b;&#x4e00;&#x5144;&#x5f1f;&#x8868;&#x793a;&#x6cd5;">
<node CREATED="1572851445459" ID="ID_1205452261" MODIFIED="1572851463548">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <img src="../Pictures/选区_032.png" />
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572851492328" ID="ID_1772665794" MODIFIED="1572851503045" TEXT="&#x6811;&#x7684;&#x904d;&#x5386;&#x53ca;&#x5176;&#x5e94;&#x7528;">
<node CREATED="1572852060361" ID="ID_1489462465" MODIFIED="1572852064419" TEXT="&#x5148;&#x5e8f;&#x904d;&#x5386;"/>
<node CREATED="1572852064774" ID="ID_282577215" MODIFIED="1572852071508" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;"/>
</node>
<node CREATED="1572862991240" ID="ID_1676745573" MODIFIED="1572862996445" TEXT="&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572918845710" ID="ID_1908339987" MODIFIED="1572918857799" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572918861265" ID="ID_1215216088" MODIFIED="1572918884552">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#20108;&#21449;&#26641;&#26159;&#27599;&#20010;&#33410;&#28857;&#26368;&#22810;&#26377;&#20004;&#20010;&#23376;&#26641;&#30340;&#26641;&#32467;&#26500;&#12290;&#23427;&#26377;&#20116;&#31181;&#22522;&#26412;&#24418;&#24577;&#65306; </font></span>
    </p>
    <p>
      <span style="color: #008000"><font color="#008000" size="16px">&#20108;&#21449;&#26641;&#21487;&#20197;&#26159;&#31354;&#38598;&#65307;&#26681;&#21487;&#20197;&#26377;&#31354;&#30340;&#24038;&#23376;&#26641;&#25110;&#21491;&#23376;&#26641;&#65307;&#25110;&#32773;&#24038;&#12289;&#21491;&#23376;&#26641;&#30342;&#20026;&#31354;&#12290;</font></span>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572916682964" ID="ID_1171402181" MODIFIED="1572917330482" TEXT="&#x6027;&#x8d28;">
<node CREATED="1572918270149" ID="ID_646383009" MODIFIED="1572919977242">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" face="华文楷体">1&#12289;&#27599;&#20010;&#32467;&#28857;&#26368;&#22810;&#26377;&#20004;&#39063;&#23376;&#26641;&#65292;&#32467;&#28857;&#30340;&#24230;&#26368;&#22823;&#20026;2&#12290; </font>
    </p>
    <p>
      <font size="3" face="华文楷体">2&#12289;&#24038;&#23376;&#26641;&#21644;&#21491;&#23376;&#26641;&#26159;&#26377;&#39034;&#24207;&#30340;&#65292;&#27425;&#24207;&#19981;&#33021;&#39072;&#20498;&#12290; </font>
    </p>
    <p>
      <font size="3" face="华文楷体">3&#12289;&#21363;&#20351;&#26576;&#32467;&#28857;&#21482;&#26377;&#19968;&#20010;&#23376;&#26641;&#65292;&#20063;&#35201;&#21306;&#20998;&#24038;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572919942507" ID="ID_364234650" MODIFIED="1572922413761">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <strong><font size="3" color="#000000">&#24615;&#36136;1</font></strong><font size="3" color="#000000">&#65306;&#20108;&#21449;&#26641;&#31532;i&#23618;&#19978;&#30340;&#32467;&#28857;&#25968;&#30446;&#26368;&#22810;&#20026;&#160;<strong>2<sup>{i-1}</sup></strong><sup>&#160;</sup>(i&#8805;1)&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;2</strong>&#65306;&#28145;&#24230;&#20026;k&#30340;&#20108;&#21449;&#26641;&#33267;&#22810;&#26377;<strong>2<sup>{k}</sup>-1</strong>&#20010;&#32467;&#28857;(k&#8805;1)&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;3</strong>&#65306;&#21253;&#21547;n&#20010;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#33267;&#23569;&#20026;<strong>log<sub>2</sub>&#160;(n+1)</strong>&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;4</strong>&#65306;&#22312;&#20219;&#24847;&#19968;&#26869;&#20108;&#21449;&#26641;&#20013;&#65292;&#33509;&#32456;&#31471;&#32467;&#28857;&#30340;&#20010;&#25968;&#20026;<strong>n<sub>0</sub></strong>&#65292;&#24230;&#20026;2&#30340;&#32467;&#28857;&#25968;&#20026;<strong>n<sub>2</sub></strong>&#65292;&#21017;<strong>n<sub>0</sub>=n<sub>2</sub>+1</strong>&#12290; </font>
    </p>
    <p>
      <font color="#000000" size="3"><strong>&#24615;&#36136;5</strong>&#65306;&#33509;&#20108;&#21449;&#26641;&#39640;&#24230;&#25110;&#28145;&#24230;&#20026;h&#65292;&#21017;&#35813;&#20108;&#21449;&#26641;&#26368;&#22810;&#26377;&#160;<strong>2<sup>h</sup>-1&#20010;&#33410;&#28857;</strong></font>
    </p>
  </body>
</html></richcontent>
<node CREATED="1572921686149" ID="ID_1322312916" MODIFIED="1572921691894" TEXT="&#x8bc1;&#x660e;">
<node CREATED="1572921833726" FOLDED="true" ID="ID_39332299" MODIFIED="1573002964862" TEXT="&#x6027;&#x8d28;2&#x8bc1;&#x660e;">
<node CREATED="1572921839092" ID="ID_1393815962" MODIFIED="1572921860756">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#22312;&#20855;&#26377;&#30456;&#21516;&#28145;&#24230;&#30340;&#20108;&#21449;&#26641;&#20013;&#65292;&#24403;&#27599;&#19968;&#23618;&#37117;&#21547;&#26377;&#26368;&#22823;&#32467;&#28857;&#25968;&#26102;&#65292;&#20854;&#26641;&#20013;&#32467;&#28857;&#25968;&#26368;&#22810;&#12290;&#21033;&#29992;&quot;&#24615;&#36136;1&quot;&#21487;&#30693;&#65292;&#28145;&#24230;&#20026;k&#30340;&#20108;&#21449;&#26641;&#30340;&#32467;&#28857;&#25968;&#33267;&#22810;&#20026;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2<sup>0</sup>+2<sup>1</sup>+&#8230;+2<sup>k-1</sup>=2<sup>k</sup>-1</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#25925;&#21407;&#21629;&#39064;&#24471;&#35777;&#65281;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572921863732" FOLDED="true" ID="ID_1275001925" MODIFIED="1572922027100" TEXT="&#x6027;&#x8d28;3&#x8bc1;&#x660e;">
<node CREATED="1572921869972" ID="ID_1408459630" MODIFIED="1572921896425">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#26681;&#25454;&quot;&#24615;&#36136;2&quot;&#21487;&#30693;&#65292;&#39640;&#24230;&#20026;h&#30340;&#20108;&#21449;&#26641;&#26368;&#22810;&#26377;2<sup>{h}</sup>&#8211;1&#20010;&#32467;&#28857;&#12290;&#21453;&#20043;&#65292;&#23545;&#20110;&#21253;&#21547;n&#20010;&#33410;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#33267;&#23569;&#20026;log<sub>2</sub>(n+1)&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572921692877" FOLDED="true" ID="ID_1501069118" MODIFIED="1572922027796" TEXT="&#x6027;&#x8d28;4&#x8bc1;&#x660e;">
<node CREATED="1572921699989" ID="ID_1932261401" MODIFIED="1572921723187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#22240;&#20026;&#20108;&#21449;&#26641;&#20013;&#25152;&#26377;&#32467;&#28857;&#30340;&#24230;&#25968;&#22343;&#19981;&#22823;&#20110;2&#65292;&#25152;&#20197;&#32467;&#28857;&#24635;&#25968;(&#35760;&#20026;n)=&quot;0&#24230;&#32467;&#28857;&#25968;(n<sub>0</sub>)&quot; + &quot;1&#24230;&#32467;&#28857;&#25968;(n<sub>1</sub>)&quot; + &quot;2&#24230;&#32467;&#28857;&#25968;(n<sub>2</sub>)&quot;&#12290;&#30001;&#27492;&#65292;&#24471;&#21040;&#31561;&#24335;&#19968;&#12290;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#31561;&#24335;&#19968;)&#160;n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#12288; &#160;&#160;&#160;&#160;&#160;&#160;&#21478;&#19968;&#26041;&#38754;&#65292;0&#24230;&#32467;&#28857;&#27809;&#26377;&#23401;&#23376;&#65292;1&#24230;&#32467;&#28857;&#26377;&#19968;&#20010;&#23401;&#23376;&#65292;2&#24230;&#32467;&#28857;&#26377;&#20004;&#20010;&#23401;&#23376;&#65292;&#25925;&#20108;&#21449;&#26641;&#20013;&#23401;&#23376;&#32467;&#28857;&#24635;&#25968;&#26159;&#65306;n<sub>1</sub>+2n<sub>2</sub>&#12290;&#27492;&#22806;&#65292;&#21482;&#26377;&#26681;&#19981;&#26159;&#20219;&#20309;&#32467;&#28857;&#30340;&#23401;&#23376;&#12290;&#25925;&#20108;&#21449;&#26641;&#20013;&#30340;&#32467;&#28857;&#24635;&#25968;&#21448;&#21487;&#34920;&#31034;&#20026;&#31561;&#24335;&#20108;&#12290;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#31561;&#24335;&#20108;)&#160;n=n<sub>1</sub>+2n<sub>2</sub>+1</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#30001;(&#31561;&#24335;&#19968;)&#21644;(&#31561;&#24335;&#20108;)&#35745;&#31639;&#24471;&#21040;&#65306;n<sub>0</sub>=n<sub>2</sub>+1&#12290;&#21407;&#21629;&#39064;&#24471;&#35777;&#65281;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1572862997264" ID="ID_253883752" MODIFIED="1572938299329" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x904d;&#x5386;&#xff08;&#x5148;&#x5e8f;&#x3001;&#x4e2d;&#x5e8f;&#x3001;&#x540e;&#x5e8f;&#xff09;">
<node CREATED="1572863063512" ID="ID_487123630" MODIFIED="1573003224797" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x8282;&#x70b9;&#x7c7b;">
<node CREATED="1572863070383" ID="ID_1723438382" MODIFIED="1572863081603">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-cpp" http-equiv="content-type"><span class="token keyword"><code class="  language-cpp">class</code></span><code class="  language-cpp"> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token comment">//&#24038;&#23376;&#26641;</span>
    TreeNode left<span class="token punctuation">;</span>
    <span class="token comment">//&#21491;&#23376;&#26641;</span>
    TreeNode right<span class="token punctuation">;</span>
    <span class="token comment">//&#26500;&#36896;&#26041;&#27861;</span>
    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863103343" ID="ID_757020353" MODIFIED="1572863113213" TEXT="&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863115991" ID="ID_1660494054" MODIFIED="1573003227594" TEXT="&#x9012;&#x5f52;&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863129135" ID="ID_1305626805" MODIFIED="1572863145668">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#20808;&#24207;&#36941;&#21382;
public static void recursionPreorderTraversal(TreeNode root) {
    if (root != null) {
        System.out.print(root.val + &quot; &quot;);
        recursionPreorderTraversal(root.left);
        recursionPreorderTraversal(root.right);
    }</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863151278" FOLDED="true" ID="ID_1023030740" MODIFIED="1573003403763" TEXT="&#x975e;&#x9012;&#x5f52;&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863168335" ID="ID_312782245" MODIFIED="1572863362292">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#20808;&#24207;&#36941;&#21382;
public static void preorderTraversal(TreeNode root) {
    // &#29992;&#26469;&#26242;&#23384;&#33410;&#28857;&#30340;&#26632;
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    // &#26032;&#24314;&#19968;&#20010;&#28216;&#26631;&#33410;&#28857;&#20026;&#26681;&#33410;&#28857;
    TreeNode node = root;
    // &#24403;&#36941;&#21382;&#21040;&#26368;&#21518;&#19968;&#20010;&#33410;&#28857;&#30340;&#26102;&#20505;&#65292;&#26080;&#35770;&#23427;&#30340;&#24038;&#21491;&#23376;&#26641;&#37117;&#20026;&#31354;&#65292;&#24182;&#19988;&#26632;&#20063;&#20026;&#31354;
    // &#25152;&#20197;&#65292;&#21482;&#35201;&#19981;&#21516;&#26102;&#28385;&#36275;&#36825;&#20004;&#28857;&#65292;&#37117;&#38656;&#35201;&#36827;&#20837;&#24490;&#29615;
    while (node != null || !treeNodeStack.isEmpty()) {
        // &#33509;&#24403;&#21069;&#32771;&#26597;&#33410;&#28857;&#38750;&#31354;&#65292;&#21017;&#36755;&#20986;&#35813;&#33410;&#28857;&#30340;&#20540;
        // &#30001;&#32771;&#26597;&#39034;&#24207;&#24471;&#30693;&#65292;&#38656;&#35201;&#19968;&#30452;&#24448;&#24038;&#36208;
        while (node != null) {
            System.out.print(node.val + &quot; &quot;);
            // &#20026;&#20102;&#20043;&#21518;&#33021;&#25214;&#21040;&#35813;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#65292;&#26242;&#23384;&#35813;&#33410;&#28857;
            treeNodeStack.push(node);
            node = node.left;
        }
        // &#19968;&#30452;&#21040;&#24038;&#23376;&#26641;&#20026;&#31354;&#65292;&#21017;&#24320;&#22987;&#32771;&#34385;&#21491;&#23376;&#26641;
        // &#22914;&#26524;&#26632;&#24050;&#31354;&#65292;&#23601;&#19981;&#38656;&#35201;&#20877;&#32771;&#34385;
        // &#24377;&#20986;&#26632;&#39030;&#20803;&#32032;&#65292;&#23558;&#28216;&#26631;&#31561;&#20110;&#35813;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;
        if (!treeNodeStack.isEmpty()) {
            node = treeNodeStack.pop();
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572863181822" ID="ID_1959968325" MODIFIED="1572863186226" TEXT="&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863186815" ID="ID_1216782549" MODIFIED="1573003551556" TEXT="&#x9012;&#x5f52;&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863210558" ID="ID_204355169" MODIFIED="1572863225992">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#20013;&#24207;&#36941;&#21382;
public static void recursionMiddleorderTraversal(TreeNode root) {
    if (root != null) {
        recursionMiddleorderTraversal(root.left);
        System.out.print(root.val + &quot; &quot;);
        recursionMiddleorderTraversal(root.right);
    }</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863192022" ID="ID_766065819" MODIFIED="1573003405500" TEXT="&#x975e;&#x9012;&#x5f52;&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863235614" ID="ID_1142181111" MODIFIED="1572863245692">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#20013;&#24207;&#36941;&#21382;
public static void middleorderTraversal(TreeNode root) {
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    TreeNode node = root;
    while (node != null || !treeNodeStack.isEmpty()) {
        while (node != null) {
            treeNodeStack.push(node);
            node = node.left;
        }
        if (!treeNodeStack.isEmpty()) {
            node = treeNodeStack.pop();
            System.out.print(node.val + &quot; &quot;);
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572863251046" ID="ID_1639027820" MODIFIED="1572863268948" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863262910" ID="ID_1302670619" MODIFIED="1573003586860" TEXT="&#x9012;&#x5f52;&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863314525" ID="ID_76545024" MODIFIED="1572863323304">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#21518;&#24207;&#36941;&#21382;
public static void recursionPostorderTraversal(TreeNode root) {
    if (root != null) {
        recursionPostorderTraversal(root.left);
        recursionPostorderTraversal(root.right);
        System.out.print(root.val + &quot; &quot;);
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863298669" ID="ID_824056158" MODIFIED="1573004054132" TEXT="&#x975e;&#x9012;&#x5f52;&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863339533" ID="ID_1653256461" MODIFIED="1572863349788">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#21518;&#24207;&#36941;&#21382;
public static void postorderTraversal(TreeNode root) {
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    TreeNode node = root;
    TreeNode lastVisit = root;
    while (node != null || !treeNodeStack.isEmpty()) {
        while (node != null) {
            treeNodeStack.push(node);
            node = node.left;
        }
        //&#26597;&#30475;&#24403;&#21069;&#26632;&#39030;&#20803;&#32032;
        node = treeNodeStack.peek();
        //&#22914;&#26524;&#20854;&#21491;&#23376;&#26641;&#20063;&#20026;&#31354;&#65292;&#25110;&#32773;&#21491;&#23376;&#26641;&#24050;&#32463;&#35775;&#38382;
        //&#21017;&#21487;&#20197;&#30452;&#25509;&#36755;&#20986;&#24403;&#21069;&#33410;&#28857;&#30340;&#20540;
        if (node.right == null || node.right == lastVisit) {
            System.out.print(node.val + &quot; &quot;);
            treeNodeStack.pop();
            lastVisit = node;
            node = null;
        } else {
            //&#21542;&#21017;&#65292;&#32487;&#32493;&#36941;&#21382;&#21491;&#23376;&#26641;
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1572921924252" ID="ID_1651722828" MODIFIED="1572921931177" TEXT="&#x6ee1;&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572921935605" ID="ID_1323290561" MODIFIED="1572921937553" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572921938172" ID="ID_291898942" MODIFIED="1572921980956">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <strong><font color="#000000">&#23450;&#20041;</font></strong><font color="#000000">&#65306;&#39640;&#24230;&#20026;h&#65292;&#24182;&#19988;&#26377;2<sup>{h}</sup>&#160; &#8211;1&#20010;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#65292;&#34987;&#31216;&#20026;&#28385;&#20108;&#21449;&#26641;&#12290;<br /></font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572922076644" ID="ID_1920723869" MODIFIED="1572922080881" TEXT="&#x5b8c;&#x5168;&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572922081564" ID="ID_603626580" MODIFIED="1572922083353" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572922089884" ID="ID_1975108794" MODIFIED="1572922105761">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <strong><font size="3" color="#000000">&#23450;&#20041;</font></strong><font size="3" color="#000000">&#65306;&#19968;&#26869;&#20108;&#21449;&#26641;&#20013;&#65292;&#21482;&#26377;&#26368;&#19979;&#38754;&#20004;&#23618;&#32467;&#28857;&#30340;&#24230;&#21487;&#20197;&#23567;&#20110;2&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#24182;&#19988;&#26368;&#19979;&#19968;&#23618;&#30340;&#21494;&#32467;&#28857;&#38598;&#20013;&#22312;&#38752;&#24038;&#30340;&#33509;&#24178;&#20301;&#32622;&#19978;&#12290;&#36825;&#26679;&#30340;&#20108; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#21449;&#26641;&#31216;&#20026;&#23436;&#20840;&#20108;&#21449;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572922428081" ID="ID_629027479" MODIFIED="1572922430286" TEXT="&#x7279;&#x70b9;">
<node CREATED="1572922431209" ID="ID_986208250" MODIFIED="1572922451775">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <span style="color: #000000"><strong><font color="#000000" size="16px">&#29305;&#28857;</font></strong><font color="#000000" size="16px">&#65306;&#21494;&#23376;&#32467;&#28857;&#21482;&#33021;&#20986;&#29616;&#22312;&#26368;&#19979;&#23618;&#21644;&#27425;&#19979;&#23618;&#65292;&#19988;&#26368;&#19979;&#23618;&#30340;&#21494;&#23376; </font></span>
    </p>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#32467;&#28857;&#38598;&#20013;&#22312;&#26641;&#30340;&#24038;&#37096;&#12290;&#26174;&#28982;&#65292;&#19968;&#26869;&#28385;&#20108;&#21449;&#26641;&#24517;&#23450;&#26159;&#19968;&#26869;&#23436;&#20840;&#20108; </font></span>
    </p>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#21449;&#26641;&#65292;&#32780;&#23436;&#20840;&#20108;&#21449;&#26641;&#26410;&#24517;&#26159;&#28385;&#20108;&#21449;&#26641;</font></span>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572922465177" ID="ID_1048551891" MODIFIED="1572922466760" TEXT="&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;">
<node CREATED="1572922467849" ID="ID_899890135" MODIFIED="1572922472334" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572922486114" ID="ID_1871405645" MODIFIED="1572922503775">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#20108;&#21449;&#26597;&#25214;&#26641;(Binary Search Tree)&#65292;&#21448;&#34987;&#31216;&#20026;&#20108;&#21449;&#25628;&#32034;&#26641;&#12290; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#35774;x&#20026;&#20108;&#21449;&#26597;&#25214;&#26641;&#20013;&#30340;&#19968;&#20010;&#32467;&#28857;&#65292;x&#33410;&#28857;&#21253;&#21547;&#20851;&#38190;&#23383;key&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#33410;&#28857;x&#30340;key&#20540;&#35760;&#20026;key[x]&#12290;&#22914;&#26524;y&#26159;x&#30340;&#24038;&#23376;&#26641;&#20013;&#30340;&#19968;&#20010;&#32467; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#28857;&#65292;&#21017;key[y] &lt;= key[x]&#65307;&#22914;&#26524;y&#26159;x&#30340;&#21491;&#23376;&#26641;&#30340;&#19968;&#20010;&#32467;&#28857;&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#21017;key[y] &gt;= key[x]&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572922533778" ID="ID_224764596" MODIFIED="1572922536415" TEXT="&#x7279;&#x70b9;">
<node CREATED="1572922537185" ID="ID_1784381576" MODIFIED="1572922565480">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font face="楷体" size="3" color="#000000">(1) &#33509;&#20219;&#24847;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#19981;&#31354;&#65292;&#21017;&#24038;&#23376;&#26641;&#19978;&#25152;&#26377;&#32467;&#28857;&#30340;&#20540;&#22343;&#23567;&#20110;&#23427;&#30340;&#26681;&#32467;&#28857;&#30340;&#20540;&#65307;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(2) &#20219;&#24847;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#19981;&#31354;&#65292;&#21017;&#21491;&#23376;&#26641;&#19978;&#25152;&#26377;&#32467;&#28857;&#30340;&#20540;&#22343;&#22823;&#20110;&#23427;&#30340;&#26681;&#32467;&#28857;&#30340;&#20540;&#65307;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(3) &#20219;&#24847;&#33410;&#28857;&#30340;&#24038;&#12289;&#21491;&#23376;&#26641;&#20063;&#20998;&#21035;&#20026;&#20108;&#21449;&#26597;&#25214;&#26641;&#12290;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(4) &#27809;&#26377;&#38190;&#20540;&#30456;&#31561;&#30340;&#33410;&#28857;&#65288;no duplicate nodes&#65289;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572932619849" ID="ID_37712135" MODIFIED="1572932631347" TEXT="&#x524d;&#x9a71;&#x548c;&#x540e;&#x7ee7;&#x8282;&#x70b9;">
<node CREATED="1572932775305" ID="ID_1478545025" MODIFIED="1573004462064" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572932779310" ID="ID_1122401092" MODIFIED="1572932788359">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21069;&#39537;&#32467;&#28857;&#65306;&#33410;&#28857;val&#20540;&#23567;&#20110;&#35813;&#33410;&#28857;val&#20540;&#24182;&#19988;&#20540;&#26368;&#22823;&#30340;&#33410;&#28857;&#160;<br content="text/html; charset=utf-8" http-equiv="content-type" />&#21518;&#32487;&#33410;&#28857;&#65306;&#33410;&#28857;val&#20540;&#22823;&#20110;&#35813;&#33410;&#28857;val&#20540;&#24182;&#19988;&#20540;&#26368;&#23567;&#30340;&#33410;&#28857;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937633043" ID="ID_274859498" MODIFIED="1572937643433" TEXT="&#x5b9e;&#x73b0;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572937645430" ID="ID_1858987072" MODIFIED="1573004468483" TEXT="&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x8282;&#x70b9;">
<node CREATED="1572937682013" ID="ID_1330044732" MODIFIED="1572937719695">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class BSTNode{
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T key;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38190;&#23383;(&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *left;&#160;&#160;&#160;&#160;// &#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *right;&#160;&#160;&#160;&#160;// &#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *parent;// &#29238;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode(T value, BSTNode *p, BSTNode *l, BSTNode *r):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key(value),parent(),left(l),right(r) {}
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572937773428" ID="ID_995681353" MODIFIED="1573004489964" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x7c7b;&#x548c;&#x63a5;&#x53e3;&#x51fd;&#x6570;&#x58f0;&#x660e;">
<node CREATED="1572937824372" ID="ID_27906550" MODIFIED="1572937831668">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class BSTree {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *mRoot;&#160;&#160;&#160;&#160;// &#26681;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTree();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;~BSTree();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* search(T key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* iterativeSearch(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#23567;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T minimum();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#22823;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T maximum();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21518;&#32487;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#22823;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* successor(BSTNode&lt;T&gt; *x);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21069;&#39537;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#23567;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#22823;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* predecessor(BSTNode&lt;T&gt; *x);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print();
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* search(BSTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* iterativeSearch(BSTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* minimum(BSTNode&lt;T&gt;* tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* maximum(BSTNode&lt;T&gt;* tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(z)&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;(tree)&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt;* z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#20108;&#21449;&#26641;(tree)&#20013;&#30340;&#32467;&#28857;(z)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* remove(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt; *z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy(BSTNode&lt;T&gt;* &amp;tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print(BSTNode&lt;T&gt;* tree, T key, int direction);
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572937870227" ID="ID_1553384812" MODIFIED="1572938325101" TEXT="&#x51fd;&#x6570;&#x5b9a;&#x4e49;&#x4ee3;&#x7801;">
<node CREATED="1572937940405" FOLDED="true" ID="ID_1674784119" MODIFIED="1573004520402" TEXT="&#x524d;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_1374293790" MODIFIED="1572937961172">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::preOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;preOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;preOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::preOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;preOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_911611021" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_792116460" MODIFIED="1572938348654">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">(01) &#35775;&#38382;&#26681;&#32467;&#28857;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#20808;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#20808;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937940405" FOLDED="true" ID="ID_987440054" MODIFIED="1573004523907" TEXT="&#x4e2d;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_8034078" MODIFIED="1572938474448">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::inOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::inOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;inOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_400701902" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_919081338" MODIFIED="1572938450118">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#20108;&#21449;&#26641;&#38750;&#31354;&#65292;&#21017;&#25191;&#34892;&#20197;&#19979;&#25805;&#20316;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(01) &#20013;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#35775;&#38382;&#26681;&#32467;&#28857;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#20013;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937940405" FOLDED="true" ID="ID_433762611" MODIFIED="1573004531466" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_1240978870" MODIFIED="1572938543112">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::postOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;postOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;postOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::postOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;postOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_1221348388" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_1471388599" MODIFIED="1572938534830">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#20108;&#21449;&#26641;&#38750;&#31354;&#65292;&#21017;&#25191;&#34892;&#20197;&#19979;&#25805;&#20316;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(01) &#21518;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#21518;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#35775;&#38382;&#26681;&#32467;&#28857;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572938561702" ID="ID_722421186" MODIFIED="1572939262205" TEXT="&#x67e5;&#x627e;">
<node CREATED="1572938564358" FOLDED="true" ID="ID_1621498181" MODIFIED="1573004576834" TEXT="&#x9012;&#x5f52;&#x67e5;&#x627e;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572938583518" ID="ID_822888528" MODIFIED="1572938939588">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::search(BSTNode&lt;T&gt;* x, T key) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x==NULL || x-&gt;key==key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return search(x-&gt;left, key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return search(x-&gt;right, key);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::search(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return search(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572938988907" FOLDED="true" ID="ID_437023755" MODIFIED="1573004593682" TEXT="&#x975e;&#x9012;&#x5f52;&#x67e5;&#x627e;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572939012571" ID="ID_590336358" MODIFIED="1572939058844">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::iterativeSearch(BSTNode&lt;T&gt;* x, T key) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((x!=NULL) &amp;&amp; (x-&gt;key!=key))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return x;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::iterativeSearch(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return iterativeSearch(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572939211809" ID="ID_201568147" MODIFIED="1573004594547" TEXT="&#x67e5;&#x627e;&#x6700;&#x5927;&#x503c;&#x548c;&#x6700;&#x5c0f;&#x503c;&#x4ee3;&#x7801;">
<node CREATED="1572939225977" FOLDED="true" ID="ID_1093007566" MODIFIED="1573004612810" TEXT="&#x67e5;&#x627e;&#x6700;&#x5927;&#x503c;">
<node CREATED="1572939256665" ID="ID_718400025" MODIFIED="1572939270276">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::maximum(BSTNode&lt;T&gt;* tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;while(tree-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      T BSTree&lt;T&gt;::maximum()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *p = maximum(mRoot);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (p != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return p-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (T)NULL;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572939229121" FOLDED="true" ID="ID_1180106607" MODIFIED="1573004621938" TEXT="&#x67e5;&#x627e;&#x6700;&#x5c0f;&#x503c;">
<node CREATED="1572939258721" ID="ID_1457016084" MODIFIED="1572939329426">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::minimum(BSTNode&lt;T&gt;* tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;while(tree-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      T BSTree&lt;T&gt;::minimum()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *p = minimum(mRoot);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (p != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return p-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (T)NULL;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572939372240" ID="ID_653026286" MODIFIED="1572939384854" TEXT="&#x67e5;&#x627e;&#x524d;&#x9a71;&#x548c;&#x540e;&#x7ee7;&#x4ee3;&#x7801;">
<node CREATED="1572939397232" FOLDED="true" ID="ID_1142868003" MODIFIED="1573004650617" TEXT="&#x67e5;&#x627e;&#x524d;&#x9a71;&#x4ee3;&#x7801;">
<node CREATED="1572939402840" ID="ID_1535973457" MODIFIED="1572939795687">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25214;&#32467;&#28857;(x)&#30340;&#21069;&#39537;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#23567;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#22823;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::predecessor(BSTNode&lt;T&gt; *x)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#23384;&#22312;&#24038;&#23401;&#23376;&#65292;&#21017;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#20026; &quot;&#20197;&#20854;&#24038;&#23401;&#23376;&#20026;<b>&#26681;&#30340;&#23376;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;</b>&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return maximum(x-&gt;left);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#27809;&#26377;&#24038;&#23401;&#23376;&#12290;&#21017;x&#26377;&#20197;&#19979;&#20004;&#31181;&#21487;&#33021;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#21491;&#23401;&#23376;&quot;&#65292;&#21017;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#20026; &quot;&#23427;&#30340;&#29238;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#24038;&#23401;&#23376;&quot;&#65292;&#21017;&#26597;&#25214;&quot;x&#30340;&#30340;&#29238;&#32467;&#28857;&#30340;&#29238;&#33410;&#28857;&#30452;&#21040;&#26377;&#19968;&#20010;&#33410;&#28857;&#26159;&#20854;&#29238;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#65292;&#24182;&#19988;&#35813;&#29238;&#32467;&#28857;&#35201;&#20855;&#26377;&#21491;&#23401;&#23376;&quot;&#65292;&#25214;&#21040;&#30340;&#36825;&#20010;&quot;&#26368;&#20302;&#30340;&#29238;&#32467;&#28857;&quot;&#23601;&#26159;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* y = x-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20063;&#21487;&#33021;&#21040;&#26681;&#33410;&#28857;&#20063;&#25214;&#19981;&#21040;&#21017;&#36820;&#22238;&#31354;&#65292;&#35813;&#33410;&#28857;&#27809;&#26377;&#21069;&#39537;&#33410;&#28857;&#65292;&#23427;value&#26368;&#23567;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((y!=NULL) &amp;&amp; (x==y-&gt;left))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = y-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572939863997" FOLDED="true" ID="ID_847502892" MODIFIED="1573004652009" TEXT="&#x67e5;&#x627e;&#x540e;&#x7ee7;&#x8282;&#x70b9;&#x4ee3;&#x7801;">
<node CREATED="1572939871573" ID="ID_1410840350" MODIFIED="1572940062014">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25214;&#32467;&#28857;(x)&#30340;&#21518;&#32487;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#22823;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::successor(BSTNode&lt;T&gt; *x)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#23384;&#22312;&#21491;&#23401;&#23376;&#65292;&#21017;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#20026; &quot;&#20197;&#20854;&#21491;&#23401;&#23376;&#20026;&#26681;&#30340;&#23376;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return minimum(x-&gt;right);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#27809;&#26377;&#21491;&#23401;&#23376;&#12290;&#21017;x&#26377;&#20197;&#19979;&#20004;&#31181;&#21487;&#33021;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#24038;&#23401;&#23376;&quot;&#65292;&#21017;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#20026; &quot;&#23427;&#30340;&#29238;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (02) x&#26159;&quot;&#19968;&#20010;&#21491;&#23401;&#23376;&quot;&#65292;&#21017;&#26597;&#25214;&quot;x&#30340;&#30340;&#29238;&#32467;&#28857;&#30340;&#29238;&#33410;&#28857;&#30452;&#21040;&#26377;&#19968;&#20010;&#33410;&#28857;&#26159;&#20854;&#29238;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#65292;&#24182;&#19988;&#35813;&#29238;&#32467;&#28857;&#35201;&#20855;&#26377;&#24038;&#23401;&#23376;&quot;&#65292;&#25214;&#21040;&#30340;&#36825;&#20010;&quot;&#26368;&#20302;&#30340;&#29238;&#32467;&#28857;&quot;&#23601;&#26159;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* y = x-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((y!=NULL) &amp;&amp; (x==y-&gt;right))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = y-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572940170098" FOLDED="true" ID="ID_1229688481" MODIFIED="1573004981279" TEXT="&#x63d2;&#x5165;&#x8282;&#x70b9;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572940176178" ID="ID_319389031" MODIFIED="1573004697288">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;&#20013;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20108;&#21449;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;z &#25554;&#20837;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::insert(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt;* z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *y = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *x = tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26597;&#25214;z&#30340;&#25554;&#20837;&#20301;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (z-&gt;key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;z-&gt;parent = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;&#25554;&#20837;&#30340;&#20540;&#27604;&#23427;&#29238;&#33410;&#28857;&#22823;&#36824;&#26159;&#23567;&#20915;&#23450;&#23427;&#25104;&#20026;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#36824;&#26159;&#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (z-&gt;key &lt; y-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;left = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;right = z;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::insert(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *z=NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&#26032;&#24314;&#32467;&#28857;&#22833;&#36133;&#65292;&#21017;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z=new BSTNode&lt;T&gt;(key,NULL,NULL,NULL)) == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;insert(mRoot, z);
    </p>
    <p>
      }
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1572940807918" FOLDED="true" ID="ID_1618234660" MODIFIED="1573004964791" TEXT="&#x5220;&#x9664;&#x8282;&#x70b9;&#x4ee3;&#x7801;">
<node CREATED="1572940819486" ID="ID_1923316095" MODIFIED="1572945780651">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#21024;&#38500;&#32467;&#28857;(z)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20108;&#21449;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;z &#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      //&#19977;&#31181;&#21487;&#33021;&#65292;&#34987;&#21024;&#38500;&#33410;&#28857;&#27809;&#26377;&#23376;&#33410;&#28857;&#65292;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;&#20004;&#20010;&#23376;&#33410;&#28857;
    </p>
    <p>
      //&#27809;&#26377;&#23376;&#33410;&#28857;&#25110;&#21482;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;y&#20026;&#34987;&#21024;&#33410;&#28857;
    </p>
    <p>
      //&#27809;&#26377;&#23376;&#33410;&#28857;&#65292;&#30452;&#25509;&#21024;&#38500;&#65292;&#23558;&#23427;&#29238;&#33410;&#28857;&#25351;&#21521;&#23427;&#30340;&#25351;&#38024;&#25351;&#21521;&#31354;
    </p>
    <p>
      //&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;&#21024;&#38500;&#21518;&#29992;&#23376;&#33410;&#28857;&#20195;&#26367;&#65292;&#23558;&#23427;&#29238;&#33410;&#28857;&#25351;&#21521;&#23427;&#30340;&#25351;&#38024;&#25351;&#21521;&#23427;&#30340;&#23376;&#33410;&#28857;
    </p>
    <p>
      //&#20004;&#20010;&#23376;&#33410;&#28857;&#65292;&#21017;y&#35774;&#20026;&#34987;&#21024;&#33410;&#28857;&#30340;&#21518;&#32487;&#33410;&#28857;&#65292;&#23558;&#21518;&#32487;&#33410;&#28857;&#30340;&#20540;&#19982;&#34987;&#21024;&#30340;&#26367;&#25442;&#65292;&#28982;&#21518;&#23558;&#21518;&#32487;&#33410;&#28857;&#30340;&#23376;&#33410;&#28857;&#26367;&#20195;&#21518;&#32487;&#33410;&#28857;&#30340;&#20301;&#32622;
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::remove(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt; *z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *x=NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *y=NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;&#34987;&#21024;&#38500;&#33410;&#28857;&#26159;&#21542;&#27809;&#26377;&#24038;&#33410;&#28857;&#25110;&#21491;&#33410;&#28857;&#65292;&#33509;&#27809;&#26377;&#21017;&#20196;y=z&#65292;&#19981;&#28982;&#21017;&#20196;y=&#23427;&#30340;&#21518;&#32487;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z-&gt;left == NULL) || (z-&gt;right == NULL) )
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = successor(z);
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;y&#30340;&#24038;&#33410;&#28857;&#26159;&#21542;&#20026;&#31354;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;y&#30340;&#24038;&#25110;&#32773;&#21491;&#33410;&#28857;&#26159;&#21542;&#20026;&#31354;&#65292;&#19981;&#20026;&#31354;&#21017;&#26367;&#20195;y
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;parent = y-&gt;parent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;parent == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (y == y-&gt;parent-&gt;left)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;left = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;right = x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y != z)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z-&gt;key = y-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::remove(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *z, *node;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z = search(mRoot, key)) != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ( (node = remove(mRoot, z)) != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete node;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572942009479" FOLDED="true" ID="ID_283394213" MODIFIED="1573004966903" TEXT="&#x6253;&#x5370;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1572942014060" ID="ID_1072914054" MODIFIED="1572942021478">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25171;&#21360;&quot;&#20108;&#21449;&#26597;&#25214;&#26641;&quot;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* key&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;-- &#33410;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;* direction&#160;&#160;--&#160;&#160;0&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#26681;&#33410;&#28857;;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;-1&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#23427;&#30340;&#29238;&#32467;&#28857;&#30340;&#24038;&#23401;&#23376;;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#23427;&#30340;&#29238;&#32467;&#28857;&#30340;&#21491;&#23401;&#23376;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::print(BSTNode&lt;T&gt;* tree, T key, int direction)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(direction==0)&#160;&#160;&#160;&#160;// tree&#26159;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; setw(2) &lt;&lt; tree-&gt;key &lt;&lt; &quot; is root&quot; &lt;&lt; endl;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// tree&#26159;&#20998;&#25903;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; setw(2) &lt;&lt; tree-&gt;key &lt;&lt; &quot; is &quot; &lt;&lt; setw(2) &lt;&lt; key &lt;&lt; &quot;'s &quot;&#160;&#160;&lt;&lt; setw(12) &lt;&lt; (direction==1?&quot;right child&quot; : &quot;left child&quot;) &lt;&lt; endl;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(tree-&gt;left, tree-&gt;key, -1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(tree-&gt;right,tree-&gt;key,&#160;&#160;1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::print()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (mRoot != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(mRoot, mRoot-&gt;key, 0);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572942033197" FOLDED="true" ID="ID_1052133664" MODIFIED="1573004813024" TEXT="&#x9500;&#x6bc1;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1572942066364" ID="ID_1787113150" MODIFIED="1572942085870">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::destroy(BSTNode&lt;T&gt;* &amp;tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destroy(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destroy(tree-&gt;right);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;delete tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree=NULL;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::destroy()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;destroy(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
</map>
