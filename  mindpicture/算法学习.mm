<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1571209243542" ID="ID_657989435" MODIFIED="1574762329371" STYLE="bubble" TEXT="&#x7b97;&#x6cd5;&#x5b66;&#x4e60;">
<node CREATED="1571212890453" FOLDED="true" ID="ID_1504134120" MODIFIED="1574762326012" POSITION="right" TEXT="&#x52a8;&#x6001;&#x89c4;&#x5212;">
<node CREATED="1571212918994" FOLDED="true" ID="ID_742693092" MODIFIED="1572857784446" TEXT="&#x56fa;&#x5b9a;&#x6d41;&#x7a0b;">
<node CREATED="1571212924978" ID="ID_1499227295" MODIFIED="1571212935588" TEXT="&#x9012;&#x5f52;&#x7684;&#x66b4;&#x529b;&#x89e3;&#x6cd5; -&gt; &#x5e26;&#x5907;&#x5fd8;&#x5f55;&#x7684;&#x9012;&#x5f52;&#x89e3;&#x6cd5; -&gt; &#x975e;&#x9012;&#x5f52;&#x7684;&#x52a8;&#x6001;&#x89c4;&#x5212;&#x89e3;&#x6cd5;">
<node CREATED="1571213010969" ID="ID_362883239" MODIFIED="1571213021919" TEXT="&#x9012;&#x5f52;&#x7684;&#x81ea;&#x9876;&#x5411;&#x4e0b;">
<node CREATED="1571213022633" ID="ID_1895886797" MODIFIED="1571213046290">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26159;&#20174;&#19978;&#21521;&#19979;&#24310;&#20280;&#65292;&#37117;&#26159;&#20174;&#19968;&#20010;&#35268;&#27169;&#36739;&#22823;&#30340;&#21407;&#38382;&#39064;
    </p>
    <p>
      &#27604;&#22914;&#35828; f(20)&#65292;&#21521;&#19979;&#36880;&#28176;&#20998;&#35299;&#35268;&#27169;&#65292;&#30452;&#21040; f(1) &#21644;
    </p>
    <p>
      &#160;f(2) &#35302;&#24213;&#65292;&#28982;&#21518;&#36880;&#23618;&#36820;&#22238;&#31572;&#26696;&#65292;&#36825;&#23601;&#21483;&#12300;&#33258;&#39030;&#21521;&#19979;&#12301;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1571213049537" ID="ID_1774270003" MODIFIED="1571213061158" TEXT="&#x52a8;&#x6001;&#x89c4;&#x5212;&#x7684;&#x81ea;&#x5e95;&#x5411;&#x4e0a;">
<node CREATED="1571213079145" ID="ID_1940575372" MODIFIED="1571213096093">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25105;&#20204;&#30452;&#25509;&#20174;&#26368;&#24213;&#19979;&#65292;&#26368;&#31616;&#21333;&#65292;&#38382;&#39064;&#35268;&#27169;&#26368;&#23567;&#30340; f(1) &#21644; f(2) &#24320;&#22987;&#24448;&#19978;&#25512;&#65292;
    </p>
    <p>
      &#30452;&#21040;&#25512;&#21040;&#25105;&#20204;&#24819;&#35201;&#30340;&#31572;&#26696; f(20)&#65292;&#36825;&#23601;&#26159;&#21160;&#24577;&#35268;&#21010;&#30340;&#24605;&#36335;&#65292;&#36825;&#20063;&#26159;&#20026;&#20160;
    </p>
    <p>
      &#20040;&#21160;&#24577;&#35268;&#21010;&#19968;&#33324;&#37117;&#33073;&#31163;&#20102;&#36882;&#24402;&#65292;&#32780;&#26159;&#30001;&#24490;&#29615;&#36845;&#20195;&#23436;&#25104;&#35745;&#31639;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1571213221720" FOLDED="true" HGAP="18" ID="ID_660275031" MODIFIED="1572848254728" TEXT="&#x72b6;&#x6001;&#x8f6c;&#x79fb;&#x65b9;&#x7a0b;" VSHIFT="-1">
<node CREATED="1571213236200" ID="ID_1673935409" MODIFIED="1571213312757" TEXT="&#x5373;&#x662f;&#x7b49;&#x5f0f;&#xff0c;&#x8bf4;&#x660e;&#x95ee;&#x9898;&#x6240;&#x6c42;&#x7684;f(n)&#x4e0e;f(n-1)&#x7b49;&#x7684;&#x7b49;&#x5f0f;&#x95ee;&#x9898;"/>
</node>
</node>
<node CREATED="1571213156992" FOLDED="true" ID="ID_1487593243" MODIFIED="1574762328099" POSITION="left" TEXT="&#x8bed;&#x5f55;">
<node CREATED="1571213160296" ID="ID_1214444122" MODIFIED="1571213161406" TEXT="&#x7b97;&#x6cd5;&#x8bbe;&#x8ba1;&#x65e0;&#x975e;&#x5c31;&#x662f;&#x5148;&#x601d;&#x8003;&#x201c;&#x5982;&#x4f55;&#x7a77;&#x4e3e;&#x201d;&#xff0c;&#x7136;&#x540e;&#x518d;&#x8ffd;&#x6c42;&#x201c;&#x5982;&#x4f55;&#x806a;&#x660e;&#x5730;&#x7a77;&#x4e3e;&#x201d;&#x3002;"/>
</node>
<node CREATED="1572849304323" ID="ID_479265951" MODIFIED="1574762706232" POSITION="right" TEXT="&#x6811;">
<node CREATED="1572849342806" ID="ID_477306374" MODIFIED="1573176710196" TEXT="&#x9884;&#x5907;&#x77e5;&#x8bc6;">
<node CREATED="1572849381230" ID="ID_421464021" MODIFIED="1572849423060" TEXT="&#x6811;&#x7684;&#x5b9a;&#x4e49;&#x65b9;&#x5f0f;">
<node CREATED="1572849425102" ID="ID_479504153" MODIFIED="1572849437820" TEXT="&#x4e00;&#x79cd;&#x81ea;&#x7136;&#x7684;&#x65b9;&#x5f0f;&#x662f;&#x9012;&#x5f52;&#x7684;&#x65b9;&#x5f0f;"/>
</node>
<node CREATED="1572849441478" ID="ID_218250822" MODIFIED="1572849451995" TEXT="&#x6811;&#x7684;&#x6982;&#x5ff5;">
<node CREATED="1572849453925" ID="ID_607654203" MODIFIED="1572849579815">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#26869;&#26641;&#26159;&#19968;&#20123;&#33410;&#28857;&#30340;&#38598;&#21512;&#65292;&#21487;&#20197;&#20026;&#31354;&#65292;&#33509;&#19981;&#20026;&#31354;&#65292;&#21017;&#26641;&#30001;&#31216;&#20316;&#26681;&#30340;&#33410;&#28857;r&#20197;&#21450;
    </p>
    <p>
      0&#20010;&#25110;&#22810;&#20010;&#38750;&#31354;&#23376;&#26641;&#32452;&#25104;&#65292;&#36825;&#20123;&#23376;&#26641;&#34987;&#26469;&#33258;&#26681;&#30340;&#19968;&#26465;&#26377;&#21521;&#30340;&#36793;&#25152;&#36830;&#25509;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572849614468" ID="ID_251433494" MODIFIED="1572849656492">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20174;&#36882;&#24402;&#23450;&#20041;&#20013;&#21457;&#29616;&#65292;&#19968;&#26869;&#26641;&#26159;N&#20010;&#33410;&#28857;&#21644;N-1&#26465;&#36793;&#30340;&#38598;&#21512;&#65292;&#20854;&#20013;&#19968;&#20010;
    </p>
    <p>
      &#33410;&#28857;&#21483;&#20570;&#26681;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572849886434" ID="ID_772092680" MODIFIED="1572918053149" TEXT="&#x6811;&#x7684;&#x6027;&#x8d28;">
<node CREATED="1572918044986" ID="ID_1348553303" MODIFIED="1572918167216">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26641;&#30340;<b>&#24230;</b>&#26159;&#22914;&#19979;&#23450;&#20041;&#30340;&#65306;&#26377;&#26681;&#26641;T&#20013;&#65292;&#32467;&#28857;x&#30340;&#23376;&#22899;&#25968;&#30446;&#31216;&#20026;x&#30340;&#24230;
    </p>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      &#19968;&#20010;&#26377;&#29992;&#30340;&#23567;&#20844;&#24335;&#65306;&#26641;&#20013;&#32467;&#28857;&#25968; = &#24635;&#20998;&#21449;&#25968; +1&#12290;(&#36825;&#37324;&#30340;&#20998;&#21449;&#25968;&#23601;&#26159;&#25152;&#26377;&#32467;&#28857;&#30340;&#24230;&#20043;&#21644;)
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572849961193" ID="ID_1992075112" MODIFIED="1572850080024">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20174;&#33410;&#28857;n1&#21040;nk&#30340;&#36335;&#24452;&#23450;&#20041;&#20026;n1&#65292;n2&#65292;n3....nk&#30340;&#19968;&#20010;&#24207;&#21015;&#65292;&#36825;&#26465;
    </p>
    <p>
      &#36335;&#24452;&#30340;&#38271;&#26159;&#35813;&#36335;&#24452;&#19978;&#30340;&#36793;&#30340;&#26465;&#25968;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572850160097" ID="ID_1931456194" MODIFIED="1573178588277">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20219;&#24847;&#33410;&#28857;nj&#30340;<b>&#28145;&#24230;</b>&#20026;&#20174;&#26681;&#21040;nj&#30340;&#21807;&#19968;&#30340;&#36335;&#24452;&#30340;&#38271;&#12290;&#22240;&#27492;&#31354;&#30340;&#26641;&#30340;&#26641;&#28145;&#24230;&#20026;0&#12290;
    </p>
    <p>
      <font color="blue">&#26641;&#20174;&#26681;&#32467;&#28857;&#24320;&#22987;&#24448;&#19979;&#25968;&#65292;&#21494;&#23376;&#32467;&#28857;&#25152;&#22312;&#30340;&#26368;&#22823;&#23618;&#25968;&#31216;&#20026; <strong>&#26641;&#30340;&#28145;&#24230;</strong>&#12290;</font>
    </p>
    <p>
      &#33410;&#28857;nj&#30340;<b>&#39640;</b>&#26159;&#20174;nj&#21040;&#19968;&#29255;&#26641;&#21494;&#30340;&#26368;&#38271;&#30340;&#36335;&#24452;&#30340;&#38271;&#12290;&#22240;&#27492;&#25152;&#26377;&#26641;&#21494;&#30340;&#39640;
    </p>
    <p>
      &#20026;0&#65292;&#19968;&#26869;&#26641;&#30340;&#39640;&#31561;&#20110;&#23427;&#26681;&#30340;&#39640;
    </p>
    <p>
      &#22914;&#26524;&#26681;&#32467;&#28857;&#31532;0&#23618;&#65292;&#23618;&#25968;=&#28145;&#24230;=&#39640;&#24230;-1
    </p>
    <p>
      &#22914;&#26524;&#26681;&#32467;&#28857;&#31532;1&#23618;&#65292;&#23618;&#25968;=&#28145;&#24230;=&#39640;&#24230;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572918716939" ID="ID_1941871324" MODIFIED="1572918723872" TEXT="&#x57fa;&#x672c;&#x672f;&#x8bed;">
<node CREATED="1572918724490" ID="ID_89877805" MODIFIED="1572918740970">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#19968;&#20010;&#32467;&#28857;&#26377;&#23376;&#26641;&#65292;&#37027;&#20040;&#35813;&#32467;&#28857;&#31216;&#20026;&#23376;&#26641;&#26681;&#30340;&quot;&#21452;&#20146;&quot;&#65292;&#23376;&#26641;&#30340;&#26681;&#26159;&#35813;&#32467;&#28857;&#30340;&quot;&#23401;&#23376;&quot;&#12290;&#26377;&#30456;&#21516;&#21452;&#20146;&#30340;&#32467;&#28857;&#20114;&#20026;&quot;&#20804;&#24351;&quot;&#12290;&#19968;&#20010;&#32467;&#28857;&#30340;&#25152;&#26377;&#23376;&#26641;&#19978;&#30340;&#20219;&#20309;&#32467;&#28857;&#37117;&#26159;&#35813;&#32467;&#28857;&#30340;&#21518;&#35028;&#12290;&#20174;&#26681;&#32467;&#28857;&#21040;&#26576;&#20010;&#32467;&#28857;&#30340;&#36335;&#24452;&#19978;&#30340;&#25152;&#26377;&#32467;&#28857;&#37117;&#26159;&#35813;&#32467;&#28857;&#30340;&#31062;&#20808;&#12290;</font>
    </p>
    <p>
      <strong><font size="3" color="#000000">&#32467;&#28857;&#30340;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#32467;&#28857;&#25317;&#26377;&#30340;&#23376;&#26641;&#30340;&#25968;&#30446;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#21494;&#23376;</font></strong><font size="3" color="#000000">&#65306;&#24230;&#20026;&#38646;&#30340;&#32467;&#28857;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#20998;&#25903;&#32467;&#28857;</font></strong><font size="3" color="#000000">&#65306;&#24230;&#19981;&#20026;&#38646;&#30340;&#32467;&#28857;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26641;&#30340;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#26641;&#20013;&#32467;&#28857;&#30340;&#26368;&#22823;&#30340;&#24230;&#12290;</font>
    </p>
    <p>
      <strong><font size="3" color="#000000">&#23618;&#27425;</font></strong><font size="3" color="#000000">&#65306;&#26681;&#32467;&#28857;&#30340;&#23618;&#27425;&#20026;1&#65292;&#20854;&#20313;&#32467;&#28857;&#30340;&#23618;&#27425;&#31561;&#20110;&#35813;&#32467;&#28857;&#30340;&#21452;&#20146;&#32467;&#28857;&#30340;&#23618;&#27425;&#21152;1&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26641;&#30340;&#39640;&#24230;</font></strong><font size="3" color="#000000">&#65306;&#26641;&#20013;&#32467;&#28857;&#30340;&#26368;&#22823;&#23618;&#27425;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26080;&#24207;&#26641;</font></strong><font size="3" color="#000000">&#65306;&#22914;&#26524;&#26641;&#20013;&#32467;&#28857;&#30340;&#21508;&#23376;&#26641;&#20043;&#38388;&#30340;&#27425;&#24207;&#26159;&#19981;&#37325;&#35201;&#30340;&#65292;&#21487;&#20197;&#20132;&#25442;&#20301;&#32622;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26377;&#24207;&#26641;</font></strong><font size="3" color="#000000">&#65306;&#22914;&#26524;&#26641;&#20013;&#32467;&#28857;&#30340;&#21508;&#23376;&#26641;&#20043;&#38388;&#30340;&#27425;&#24207;&#26159;&#37325;&#35201;&#30340;, &#19981;&#21487;&#20197;&#20132;&#25442;&#20301;&#32622;&#12290;</font><font size="3"><br size="3" /></font><strong><font size="3" color="#000000">&#26862;&#26519;</font></strong><font size="3" color="#000000">&#65306;0&#20010;&#25110;&#22810;&#20010;&#19981;&#30456;&#20132;&#30340;&#26641;&#32452;&#25104;&#12290;&#23545;&#26862;&#26519;&#21152;&#19978;&#19968;&#20010;&#26681;&#65292;&#26862;&#26519;&#21363;&#25104;&#20026;&#26641;&#65307;&#21024;&#21435;&#26681;&#65292;&#26641;&#21363;&#25104;&#20026;&#26862;&#26519;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572850445791" ID="ID_903737197" MODIFIED="1572850468572" TEXT="&#x7956;&#x5148;&#x3001;&#x540e;&#x88d4;&#xff1b;&#x771f;&#x7956;&#x5148;&#x3001;&#x771f;&#x540e;&#x88d4;">
<node CREATED="1572850469295" ID="ID_1578533732" MODIFIED="1572850545173">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#33509;&#23384;&#22312;&#20174;n1&#21040;n2.&#30340;&#19968;&#26465;&#36335;&#24452;&#65292;&#37027;&#20040;n1&#20026;n2&#30340;&#19968;&#20301;&#31062;&#20808;&#65307;
    </p>
    <p>
      &#33509;n1&#8800;n2&#65292;&#21017;n1&#26159;n2&#30340;&#30495;&#31062;&#20808;&#65292;&#21518;&#35028;&#21516;&#29702;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node COLOR="#006699" CREATED="1572850551846" ID="ID_736783424" MODIFIED="1572850998428" TEXT="&#x6811;&#x7684;&#x5b9e;&#x73b0;">
<node CREATED="1572851120387" ID="ID_849621222" MODIFIED="1573002801735" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1572851229202" ID="ID_761200139" MODIFIED="1572851347975">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      struct TreeNode
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;Object&#160;&#160;&#160;element;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;TreeNode&#160;&#160;*firstChild;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;TreeNode&#160;&#160;*nextSibling;
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572851123995" FOLDED="true" ID="ID_781508031" MODIFIED="1573002811583" TEXT="&#x7b2c;&#x4e00;&#x513f;&#x5b50;/&#x4e0b;&#x4e00;&#x5144;&#x5f1f;&#x8868;&#x793a;&#x6cd5;">
<node CREATED="1572851445459" ID="ID_1205452261" MODIFIED="1572851463548">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <img src="../Pictures/选区_032.png" />
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572851492328" ID="ID_1772665794" MODIFIED="1572851503045" TEXT="&#x6811;&#x7684;&#x904d;&#x5386;&#x53ca;&#x5176;&#x5e94;&#x7528;">
<node CREATED="1572852060361" ID="ID_1489462465" MODIFIED="1572852064419" TEXT="&#x5148;&#x5e8f;&#x904d;&#x5386;"/>
<node CREATED="1572852064774" ID="ID_282577215" MODIFIED="1572852071508" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;"/>
</node>
<node CREATED="1572862991240" ID="ID_1676745573" MODIFIED="1574760214730" TEXT="&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572918845710" ID="ID_1908339987" MODIFIED="1572918857799" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572918861265" ID="ID_1215216088" MODIFIED="1572918884552">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#20108;&#21449;&#26641;&#26159;&#27599;&#20010;&#33410;&#28857;&#26368;&#22810;&#26377;&#20004;&#20010;&#23376;&#26641;&#30340;&#26641;&#32467;&#26500;&#12290;&#23427;&#26377;&#20116;&#31181;&#22522;&#26412;&#24418;&#24577;&#65306; </font></span>
    </p>
    <p>
      <span style="color: #008000"><font color="#008000" size="16px">&#20108;&#21449;&#26641;&#21487;&#20197;&#26159;&#31354;&#38598;&#65307;&#26681;&#21487;&#20197;&#26377;&#31354;&#30340;&#24038;&#23376;&#26641;&#25110;&#21491;&#23376;&#26641;&#65307;&#25110;&#32773;&#24038;&#12289;&#21491;&#23376;&#26641;&#30342;&#20026;&#31354;&#12290;</font></span>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572916682964" ID="ID_1171402181" MODIFIED="1572917330482" TEXT="&#x6027;&#x8d28;">
<node CREATED="1572918270149" ID="ID_646383009" MODIFIED="1572919977242">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" face="华文楷体">1&#12289;&#27599;&#20010;&#32467;&#28857;&#26368;&#22810;&#26377;&#20004;&#39063;&#23376;&#26641;&#65292;&#32467;&#28857;&#30340;&#24230;&#26368;&#22823;&#20026;2&#12290; </font>
    </p>
    <p>
      <font size="3" face="华文楷体">2&#12289;&#24038;&#23376;&#26641;&#21644;&#21491;&#23376;&#26641;&#26159;&#26377;&#39034;&#24207;&#30340;&#65292;&#27425;&#24207;&#19981;&#33021;&#39072;&#20498;&#12290; </font>
    </p>
    <p>
      <font size="3" face="华文楷体">3&#12289;&#21363;&#20351;&#26576;&#32467;&#28857;&#21482;&#26377;&#19968;&#20010;&#23376;&#26641;&#65292;&#20063;&#35201;&#21306;&#20998;&#24038;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572919942507" FOLDED="true" ID="ID_364234650" MODIFIED="1573177464863">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <strong><font size="3" color="#000000">&#24615;&#36136;1</font></strong><font size="3" color="#000000">&#65306;&#20108;&#21449;&#26641;&#31532;i&#23618;&#19978;&#30340;&#32467;&#28857;&#25968;&#30446;&#26368;&#22810;&#20026;&#160;<strong>2<sup>{i-1}</sup></strong><sup>&#160;</sup>(i&#8805;1)&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;2</strong>&#65306;&#28145;&#24230;&#20026;k&#30340;&#20108;&#21449;&#26641;&#33267;&#22810;&#26377;<strong>2<sup>{k}</sup>-1</strong>&#20010;&#32467;&#28857;(k&#8805;1)&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;3</strong>&#65306;&#21253;&#21547;n&#20010;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#33267;&#23569;&#20026;<strong>log<sub>2</sub>&#160;(n+1)</strong>&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3"><strong>&#24615;&#36136;4</strong>&#65306;&#22312;&#20219;&#24847;&#19968;&#26869;&#20108;&#21449;&#26641;&#20013;&#65292;&#33509;&#32456;&#31471;&#32467;&#28857;&#30340;&#20010;&#25968;&#20026;<strong>n<sub>0</sub></strong>&#65292;&#24230;&#20026;2&#30340;&#32467;&#28857;&#25968;&#20026;<strong>n<sub>2</sub></strong>&#65292;&#21017;<strong>n<sub>0</sub>=n<sub>2</sub>+1</strong>&#12290; </font>
    </p>
    <p>
      <font color="#000000" size="3"><strong>&#24615;&#36136;5</strong>&#65306;&#33509;&#20108;&#21449;&#26641;&#39640;&#24230;&#25110;&#28145;&#24230;&#20026;h&#65292;&#21017;&#35813;&#20108;&#21449;&#26641;&#26368;&#22810;&#26377;&#160;<strong>2<sup>h</sup>-1&#20010;&#33410;&#28857;</strong></font>
    </p>
  </body>
</html></richcontent>
<node CREATED="1572921686149" ID="ID_1322312916" MODIFIED="1572921691894" TEXT="&#x8bc1;&#x660e;">
<node CREATED="1572921833726" FOLDED="true" ID="ID_39332299" MODIFIED="1573176703092" TEXT="&#x6027;&#x8d28;2&#x8bc1;&#x660e;">
<node CREATED="1572921839092" ID="ID_1393815962" MODIFIED="1572921860756">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#22312;&#20855;&#26377;&#30456;&#21516;&#28145;&#24230;&#30340;&#20108;&#21449;&#26641;&#20013;&#65292;&#24403;&#27599;&#19968;&#23618;&#37117;&#21547;&#26377;&#26368;&#22823;&#32467;&#28857;&#25968;&#26102;&#65292;&#20854;&#26641;&#20013;&#32467;&#28857;&#25968;&#26368;&#22810;&#12290;&#21033;&#29992;&quot;&#24615;&#36136;1&quot;&#21487;&#30693;&#65292;&#28145;&#24230;&#20026;k&#30340;&#20108;&#21449;&#26641;&#30340;&#32467;&#28857;&#25968;&#33267;&#22810;&#20026;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2<sup>0</sup>+2<sup>1</sup>+&#8230;+2<sup>k-1</sup>=2<sup>k</sup>-1</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#25925;&#21407;&#21629;&#39064;&#24471;&#35777;&#65281;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572921863732" FOLDED="true" ID="ID_1275001925" MODIFIED="1572922027100" TEXT="&#x6027;&#x8d28;3&#x8bc1;&#x660e;">
<node CREATED="1572921869972" ID="ID_1408459630" MODIFIED="1572921896425">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#26681;&#25454;&quot;&#24615;&#36136;2&quot;&#21487;&#30693;&#65292;&#39640;&#24230;&#20026;h&#30340;&#20108;&#21449;&#26641;&#26368;&#22810;&#26377;2<sup>{h}</sup>&#8211;1&#20010;&#32467;&#28857;&#12290;&#21453;&#20043;&#65292;&#23545;&#20110;&#21253;&#21547;n&#20010;&#33410;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#33267;&#23569;&#20026;log<sub>2</sub>(n+1)&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572921692877" FOLDED="true" ID="ID_1501069118" MODIFIED="1572922027796" TEXT="&#x6027;&#x8d28;4&#x8bc1;&#x660e;">
<node CREATED="1572921699989" ID="ID_1932261401" MODIFIED="1572921723187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#35777;&#26126;&#65306;&#22240;&#20026;&#20108;&#21449;&#26641;&#20013;&#25152;&#26377;&#32467;&#28857;&#30340;&#24230;&#25968;&#22343;&#19981;&#22823;&#20110;2&#65292;&#25152;&#20197;&#32467;&#28857;&#24635;&#25968;(&#35760;&#20026;n)=&quot;0&#24230;&#32467;&#28857;&#25968;(n<sub>0</sub>)&quot; + &quot;1&#24230;&#32467;&#28857;&#25968;(n<sub>1</sub>)&quot; + &quot;2&#24230;&#32467;&#28857;&#25968;(n<sub>2</sub>)&quot;&#12290;&#30001;&#27492;&#65292;&#24471;&#21040;&#31561;&#24335;&#19968;&#12290;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#31561;&#24335;&#19968;)&#160;n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#12288; &#160;&#160;&#160;&#160;&#160;&#160;&#21478;&#19968;&#26041;&#38754;&#65292;0&#24230;&#32467;&#28857;&#27809;&#26377;&#23401;&#23376;&#65292;1&#24230;&#32467;&#28857;&#26377;&#19968;&#20010;&#23401;&#23376;&#65292;2&#24230;&#32467;&#28857;&#26377;&#20004;&#20010;&#23401;&#23376;&#65292;&#25925;&#20108;&#21449;&#26641;&#20013;&#23401;&#23376;&#32467;&#28857;&#24635;&#25968;&#26159;&#65306;n<sub>1</sub>+2n<sub>2</sub>&#12290;&#27492;&#22806;&#65292;&#21482;&#26377;&#26681;&#19981;&#26159;&#20219;&#20309;&#32467;&#28857;&#30340;&#23401;&#23376;&#12290;&#25925;&#20108;&#21449;&#26641;&#20013;&#30340;&#32467;&#28857;&#24635;&#25968;&#21448;&#21487;&#34920;&#31034;&#20026;&#31561;&#24335;&#20108;&#12290;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#31561;&#24335;&#20108;)&#160;n=n<sub>1</sub>+2n<sub>2</sub>+1</font><font size="3"><br size="3" /></font><font size="3" color="#000000">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#30001;(&#31561;&#24335;&#19968;)&#21644;(&#31561;&#24335;&#20108;)&#35745;&#31639;&#24471;&#21040;&#65306;n<sub>0</sub>=n<sub>2</sub>+1&#12290;&#21407;&#21629;&#39064;&#24471;&#35777;&#65281;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1572862997264" FOLDED="true" ID="ID_253883752" MODIFIED="1573176828108" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x904d;&#x5386;&#xff08;&#x5148;&#x5e8f;&#x3001;&#x4e2d;&#x5e8f;&#x3001;&#x540e;&#x5e8f;&#xff09;">
<node CREATED="1572863063512" ID="ID_487123630" MODIFIED="1573003224797" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x8282;&#x70b9;&#x7c7b;">
<node CREATED="1572863070383" ID="ID_1723438382" MODIFIED="1572863081603">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-cpp" http-equiv="content-type"><span class="token keyword"><code class="  language-cpp">class</code></span><code class="  language-cpp"> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token comment">//&#24038;&#23376;&#26641;</span>
    TreeNode left<span class="token punctuation">;</span>
    <span class="token comment">//&#21491;&#23376;&#26641;</span>
    TreeNode right<span class="token punctuation">;</span>
    <span class="token comment">//&#26500;&#36896;&#26041;&#27861;</span>
    <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        val <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863103343" ID="ID_757020353" MODIFIED="1572863113213" TEXT="&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863115991" ID="ID_1660494054" MODIFIED="1573003227594" TEXT="&#x9012;&#x5f52;&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863129135" ID="ID_1305626805" MODIFIED="1572863145668">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#20808;&#24207;&#36941;&#21382;
public static void recursionPreorderTraversal(TreeNode root) {
    if (root != null) {
        System.out.print(root.val + &quot; &quot;);
        recursionPreorderTraversal(root.left);
        recursionPreorderTraversal(root.right);
    }</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863151278" FOLDED="true" ID="ID_1023030740" MODIFIED="1573003403763" TEXT="&#x975e;&#x9012;&#x5f52;&#x5148;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863168335" ID="ID_312782245" MODIFIED="1572863362292">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#20808;&#24207;&#36941;&#21382;
public static void preorderTraversal(TreeNode root) {
    // &#29992;&#26469;&#26242;&#23384;&#33410;&#28857;&#30340;&#26632;
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    // &#26032;&#24314;&#19968;&#20010;&#28216;&#26631;&#33410;&#28857;&#20026;&#26681;&#33410;&#28857;
    TreeNode node = root;
    // &#24403;&#36941;&#21382;&#21040;&#26368;&#21518;&#19968;&#20010;&#33410;&#28857;&#30340;&#26102;&#20505;&#65292;&#26080;&#35770;&#23427;&#30340;&#24038;&#21491;&#23376;&#26641;&#37117;&#20026;&#31354;&#65292;&#24182;&#19988;&#26632;&#20063;&#20026;&#31354;
    // &#25152;&#20197;&#65292;&#21482;&#35201;&#19981;&#21516;&#26102;&#28385;&#36275;&#36825;&#20004;&#28857;&#65292;&#37117;&#38656;&#35201;&#36827;&#20837;&#24490;&#29615;
    while (node != null || !treeNodeStack.isEmpty()) {
        // &#33509;&#24403;&#21069;&#32771;&#26597;&#33410;&#28857;&#38750;&#31354;&#65292;&#21017;&#36755;&#20986;&#35813;&#33410;&#28857;&#30340;&#20540;
        // &#30001;&#32771;&#26597;&#39034;&#24207;&#24471;&#30693;&#65292;&#38656;&#35201;&#19968;&#30452;&#24448;&#24038;&#36208;
        while (node != null) {
            System.out.print(node.val + &quot; &quot;);
            // &#20026;&#20102;&#20043;&#21518;&#33021;&#25214;&#21040;&#35813;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#65292;&#26242;&#23384;&#35813;&#33410;&#28857;
            treeNodeStack.push(node);
            node = node.left;
        }
        // &#19968;&#30452;&#21040;&#24038;&#23376;&#26641;&#20026;&#31354;&#65292;&#21017;&#24320;&#22987;&#32771;&#34385;&#21491;&#23376;&#26641;
        // &#22914;&#26524;&#26632;&#24050;&#31354;&#65292;&#23601;&#19981;&#38656;&#35201;&#20877;&#32771;&#34385;
        // &#24377;&#20986;&#26632;&#39030;&#20803;&#32032;&#65292;&#23558;&#28216;&#26631;&#31561;&#20110;&#35813;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;
        if (!treeNodeStack.isEmpty()) {
            node = treeNodeStack.pop();
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572863181822" ID="ID_1959968325" MODIFIED="1572863186226" TEXT="&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863186815" ID="ID_1216782549" MODIFIED="1573003551556" TEXT="&#x9012;&#x5f52;&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863210558" ID="ID_204355169" MODIFIED="1572863225992">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#20013;&#24207;&#36941;&#21382;
public static void recursionMiddleorderTraversal(TreeNode root) {
    if (root != null) {
        recursionMiddleorderTraversal(root.left);
        System.out.print(root.val + &quot; &quot;);
        recursionMiddleorderTraversal(root.right);
    }</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863192022" ID="ID_766065819" MODIFIED="1573003405500" TEXT="&#x975e;&#x9012;&#x5f52;&#x4e2d;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863235614" ID="ID_1142181111" MODIFIED="1572863245692">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#20013;&#24207;&#36941;&#21382;
public static void middleorderTraversal(TreeNode root) {
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    TreeNode node = root;
    while (node != null || !treeNodeStack.isEmpty()) {
        while (node != null) {
            treeNodeStack.push(node);
            node = node.left;
        }
        if (!treeNodeStack.isEmpty()) {
            node = treeNodeStack.pop();
            System.out.print(node.val + &quot; &quot;);
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572863251046" ID="ID_1639027820" MODIFIED="1572863268948" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863262910" ID="ID_1302670619" MODIFIED="1573003586860" TEXT="&#x9012;&#x5f52;&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863314525" ID="ID_76545024" MODIFIED="1572863323304">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#36882;&#24402;&#21518;&#24207;&#36941;&#21382;
public static void recursionPostorderTraversal(TreeNode root) {
    if (root != null) {
        recursionPostorderTraversal(root.left);
        recursionPostorderTraversal(root.right);
        System.out.print(root.val + &quot; &quot;);
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572863298669" ID="ID_824056158" MODIFIED="1573004054132" TEXT="&#x975e;&#x9012;&#x5f52;&#x540e;&#x5e8f;&#x904d;&#x5386;">
<node CREATED="1572863339533" ID="ID_1653256461" MODIFIED="1572863349788">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <pre content="text/html; charset=utf-8" class="line-numbers  language-csharp" http-equiv="content-type"><code class="  language-csharp">// &#38750;&#36882;&#24402;&#21518;&#24207;&#36941;&#21382;
public static void postorderTraversal(TreeNode root) {
    Stack&lt;TreeNode&gt; treeNodeStack = new Stack&lt;TreeNode&gt;();
    TreeNode node = root;
    TreeNode lastVisit = root;
    while (node != null || !treeNodeStack.isEmpty()) {
        while (node != null) {
            treeNodeStack.push(node);
            node = node.left;
        }
        //&#26597;&#30475;&#24403;&#21069;&#26632;&#39030;&#20803;&#32032;
        node = treeNodeStack.peek();
        //&#22914;&#26524;&#20854;&#21491;&#23376;&#26641;&#20063;&#20026;&#31354;&#65292;&#25110;&#32773;&#21491;&#23376;&#26641;&#24050;&#32463;&#35775;&#38382;
        //&#21017;&#21487;&#20197;&#30452;&#25509;&#36755;&#20986;&#24403;&#21069;&#33410;&#28857;&#30340;&#20540;
        if (node.right == null || node.right == lastVisit) {
            System.out.print(node.val + &quot; &quot;);
            treeNodeStack.pop();
            lastVisit = node;
            node = null;
        } else {
            //&#21542;&#21017;&#65292;&#32487;&#32493;&#36941;&#21382;&#21491;&#23376;&#26641;
            node = node.right;
        }
    }
}</code></pre>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1572921924252" ID="ID_1651722828" MODIFIED="1572921931177" TEXT="&#x6ee1;&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572921935605" ID="ID_1323290561" MODIFIED="1572921937553" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572921938172" ID="ID_291898942" MODIFIED="1572921980956">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <strong><font color="#000000">&#23450;&#20041;</font></strong><font color="#000000">&#65306;&#39640;&#24230;&#20026;h&#65292;&#24182;&#19988;&#26377;2<sup>{h}</sup>&#160; &#8211;1&#20010;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#65292;&#34987;&#31216;&#20026;&#28385;&#20108;&#21449;&#26641;&#12290;<br /></font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572922076644" ID="ID_1920723869" MODIFIED="1572922080881" TEXT="&#x5b8c;&#x5168;&#x4e8c;&#x53c9;&#x6811;">
<node CREATED="1572922081564" FOLDED="true" ID="ID_603626580" MODIFIED="1573434238941" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572922089884" ID="ID_1975108794" MODIFIED="1572922105761">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <strong><font size="3" color="#000000">&#23450;&#20041;</font></strong><font size="3" color="#000000">&#65306;&#19968;&#26869;&#20108;&#21449;&#26641;&#20013;&#65292;&#21482;&#26377;&#26368;&#19979;&#38754;&#20004;&#23618;&#32467;&#28857;&#30340;&#24230;&#21487;&#20197;&#23567;&#20110;2&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#24182;&#19988;&#26368;&#19979;&#19968;&#23618;&#30340;&#21494;&#32467;&#28857;&#38598;&#20013;&#22312;&#38752;&#24038;&#30340;&#33509;&#24178;&#20301;&#32622;&#19978;&#12290;&#36825;&#26679;&#30340;&#20108; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#21449;&#26641;&#31216;&#20026;&#23436;&#20840;&#20108;&#21449;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572922428081" FOLDED="true" ID="ID_629027479" MODIFIED="1573434237349" TEXT="&#x7279;&#x70b9;">
<node CREATED="1572922431209" ID="ID_986208250" MODIFIED="1572922451775">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <span style="color: #000000"><strong><font color="#000000" size="16px">&#29305;&#28857;</font></strong><font color="#000000" size="16px">&#65306;&#21494;&#23376;&#32467;&#28857;&#21482;&#33021;&#20986;&#29616;&#22312;&#26368;&#19979;&#23618;&#21644;&#27425;&#19979;&#23618;&#65292;&#19988;&#26368;&#19979;&#23618;&#30340;&#21494;&#23376; </font></span>
    </p>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#32467;&#28857;&#38598;&#20013;&#22312;&#26641;&#30340;&#24038;&#37096;&#12290;&#26174;&#28982;&#65292;&#19968;&#26869;&#28385;&#20108;&#21449;&#26641;&#24517;&#23450;&#26159;&#19968;&#26869;&#23436;&#20840;&#20108; </font></span>
    </p>
    <p>
      <span style="color: #000000"><font color="#000000" size="16px">&#21449;&#26641;&#65292;&#32780;&#23436;&#20840;&#20108;&#21449;&#26641;&#26410;&#24517;&#26159;&#28385;&#20108;&#21449;&#26641;</font></span>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572922465177" ID="ID_1048551891" MODIFIED="1573177237391" TEXT="&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;">
<node CREATED="1572922467849" ID="ID_899890135" MODIFIED="1573450568713" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572922486114" ID="ID_1871405645" MODIFIED="1572922503775">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#20108;&#21449;&#26597;&#25214;&#26641;(Binary Search Tree)&#65292;&#21448;&#34987;&#31216;&#20026;&#20108;&#21449;&#25628;&#32034;&#26641;&#12290; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#35774;x&#20026;&#20108;&#21449;&#26597;&#25214;&#26641;&#20013;&#30340;&#19968;&#20010;&#32467;&#28857;&#65292;x&#33410;&#28857;&#21253;&#21547;&#20851;&#38190;&#23383;key&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#33410;&#28857;x&#30340;key&#20540;&#35760;&#20026;key[x]&#12290;&#22914;&#26524;y&#26159;x&#30340;&#24038;&#23376;&#26641;&#20013;&#30340;&#19968;&#20010;&#32467; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#28857;&#65292;&#21017;key[y] &lt;= key[x]&#65307;&#22914;&#26524;y&#26159;x&#30340;&#21491;&#23376;&#26641;&#30340;&#19968;&#20010;&#32467;&#28857;&#65292; </font>
    </p>
    <p>
      <font size="3" color="#000000">&#21017;key[y] &gt;= key[x]&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572922533778" FOLDED="true" ID="ID_224764596" MODIFIED="1573434234869" TEXT="&#x7279;&#x70b9;">
<node CREATED="1572922537185" ID="ID_1784381576" MODIFIED="1572922565480">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font face="楷体" size="3" color="#000000">(1) &#33509;&#20219;&#24847;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#19981;&#31354;&#65292;&#21017;&#24038;&#23376;&#26641;&#19978;&#25152;&#26377;&#32467;&#28857;&#30340;&#20540;&#22343;&#23567;&#20110;&#23427;&#30340;&#26681;&#32467;&#28857;&#30340;&#20540;&#65307;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(2) &#20219;&#24847;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#19981;&#31354;&#65292;&#21017;&#21491;&#23376;&#26641;&#19978;&#25152;&#26377;&#32467;&#28857;&#30340;&#20540;&#22343;&#22823;&#20110;&#23427;&#30340;&#26681;&#32467;&#28857;&#30340;&#20540;&#65307;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(3) &#20219;&#24847;&#33410;&#28857;&#30340;&#24038;&#12289;&#21491;&#23376;&#26641;&#20063;&#20998;&#21035;&#20026;&#20108;&#21449;&#26597;&#25214;&#26641;&#12290;</font><font size="3"><br size="3" /></font><font face="楷体" size="3" color="#000000">(4) &#27809;&#26377;&#38190;&#20540;&#30456;&#31561;&#30340;&#33410;&#28857;&#65288;no duplicate nodes&#65289;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572932619849" ID="ID_37712135" MODIFIED="1574910007508" TEXT="&#x524d;&#x9a71;&#x548c;&#x540e;&#x7ee7;&#x8282;&#x70b9;">
<node CREATED="1572932775305" ID="ID_1478545025" MODIFIED="1573004462064" TEXT="&#x5b9a;&#x4e49;">
<node CREATED="1572932779310" ID="ID_1122401092" MODIFIED="1572932788359">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21069;&#39537;&#32467;&#28857;&#65306;&#33410;&#28857;val&#20540;&#23567;&#20110;&#35813;&#33410;&#28857;val&#20540;&#24182;&#19988;&#20540;&#26368;&#22823;&#30340;&#33410;&#28857;&#160;<br content="text/html; charset=utf-8" http-equiv="content-type" />&#21518;&#32487;&#33410;&#28857;&#65306;&#33410;&#28857;val&#20540;&#22823;&#20110;&#35813;&#33410;&#28857;val&#20540;&#24182;&#19988;&#20540;&#26368;&#23567;&#30340;&#33410;&#28857;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937633043" ID="ID_274859498" MODIFIED="1573435503081" TEXT="&#x5b9e;&#x73b0;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572937645430" FOLDED="true" ID="ID_1858987072" MODIFIED="1573176629525" TEXT="&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x8282;&#x70b9;">
<node CREATED="1572937682013" ID="ID_1330044732" MODIFIED="1572937719695">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class BSTNode{
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T key;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38190;&#23383;(&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *left;&#160;&#160;&#160;&#160;// &#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *right;&#160;&#160;&#160;&#160;// &#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode *parent;// &#29238;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode(T value, BSTNode *p, BSTNode *l, BSTNode *r):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key(value),parent(),left(l),right(r) {}
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572937773428" FOLDED="true" ID="ID_995681353" MODIFIED="1573185048255" TEXT="&#x4e8c;&#x53c9;&#x6811;&#x7c7b;&#x548c;&#x63a5;&#x53e3;&#x51fd;&#x6570;&#x58f0;&#x660e;">
<node CREATED="1572937824372" ID="ID_27906550" MODIFIED="1572937831668">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class BSTree {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *mRoot;&#160;&#160;&#160;&#160;// &#26681;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTree();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;~BSTree();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* search(T key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* iterativeSearch(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#23567;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T minimum();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#22823;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T maximum();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21518;&#32487;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#22823;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* successor(BSTNode&lt;T&gt; *x);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21069;&#39537;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#23567;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#22823;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* predecessor(BSTNode&lt;T&gt; *x);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print();
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20108;&#21449;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder(BSTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* search(BSTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20108;&#21449;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* iterativeSearch(BSTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* minimum(BSTNode&lt;T&gt;* tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20108;&#21449;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* maximum(BSTNode&lt;T&gt;* tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(z)&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;(tree)&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt;* z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#20108;&#21449;&#26641;(tree)&#20013;&#30340;&#32467;&#28857;(z)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* remove(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt; *z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy(BSTNode&lt;T&gt;* &amp;tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print(BSTNode&lt;T&gt;* tree, T key, int direction);
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572937870227" ID="ID_1553384812" MODIFIED="1572938325101" TEXT="&#x51fd;&#x6570;&#x5b9a;&#x4e49;&#x4ee3;&#x7801;">
<node CREATED="1572937940405" FOLDED="true" ID="ID_1674784119" MODIFIED="1573004520402" TEXT="&#x524d;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_1374293790" MODIFIED="1572937961172">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::preOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;preOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;preOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::preOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;preOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_911611021" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_792116460" MODIFIED="1572938348654">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">(01) &#35775;&#38382;&#26681;&#32467;&#28857;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#20808;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#20808;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937940405" FOLDED="true" ID="ID_987440054" MODIFIED="1573435516684" TEXT="&#x4e2d;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_8034078" MODIFIED="1572938474448">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::inOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::inOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;inOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_400701902" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_919081338" MODIFIED="1572938450118">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#20108;&#21449;&#26641;&#38750;&#31354;&#65292;&#21017;&#25191;&#34892;&#20197;&#19979;&#25805;&#20316;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(01) &#20013;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#35775;&#38382;&#26681;&#32467;&#28857;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#20013;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572937940405" FOLDED="true" ID="ID_433762611" MODIFIED="1573435510884" TEXT="&#x540e;&#x5e8f;&#x904d;&#x5386;&#x4ee3;&#x7801; ">
<node CREATED="1572937956931" ID="ID_1240978870" MODIFIED="1572938543112">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::postOrder(BSTNode&lt;T&gt;* tree) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;postOrder(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;postOrder(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout&lt;&lt; tree-&gt;key &lt;&lt; &quot; &quot; ;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::postOrder()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;postOrder(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1572938331940" ID="ID_1221348388" MODIFIED="1572938339694" TEXT="&#x904d;&#x5386;&#x64cd;&#x4f5c;">
<node CREATED="1572938340304" ID="ID_1471388599" MODIFIED="1572938534830">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font size="3" color="#000000">&#33509;&#20108;&#21449;&#26641;&#38750;&#31354;&#65292;&#21017;&#25191;&#34892;&#20197;&#19979;&#25805;&#20316;&#65306;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(01) &#21518;&#24207;&#36941;&#21382;&#24038;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(02) &#21518;&#24207;&#36941;&#21382;&#21491;&#23376;&#26641;&#65307;</font><font size="3"><br size="3" /></font><font size="3" color="#000000">(03) &#35775;&#38382;&#26681;&#32467;&#28857;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572938561702" ID="ID_722421186" MODIFIED="1572939262205" TEXT="&#x67e5;&#x627e;">
<node CREATED="1572938564358" FOLDED="true" ID="ID_1621498181" MODIFIED="1573004576834" TEXT="&#x9012;&#x5f52;&#x67e5;&#x627e;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572938583518" ID="ID_822888528" MODIFIED="1572938939588">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::search(BSTNode&lt;T&gt;* x, T key) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x==NULL || x-&gt;key==key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return search(x-&gt;left, key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return search(x-&gt;right, key);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::search(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return search(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572938988907" FOLDED="true" ID="ID_437023755" MODIFIED="1573004593682" TEXT="&#x975e;&#x9012;&#x5f52;&#x67e5;&#x627e;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572939012571" ID="ID_590336358" MODIFIED="1572939058844">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::iterativeSearch(BSTNode&lt;T&gt;* x, T key) const
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((x!=NULL) &amp;&amp; (x-&gt;key!=key))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return x;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::iterativeSearch(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return iterativeSearch(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572939211809" ID="ID_201568147" MODIFIED="1573004594547" TEXT="&#x67e5;&#x627e;&#x6700;&#x5927;&#x503c;&#x548c;&#x6700;&#x5c0f;&#x503c;&#x4ee3;&#x7801;">
<node CREATED="1572939225977" FOLDED="true" ID="ID_1093007566" MODIFIED="1573004612810" TEXT="&#x67e5;&#x627e;&#x6700;&#x5927;&#x503c;">
<node CREATED="1572939256665" ID="ID_718400025" MODIFIED="1572939270276">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::maximum(BSTNode&lt;T&gt;* tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;while(tree-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      T BSTree&lt;T&gt;::maximum()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *p = maximum(mRoot);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (p != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return p-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (T)NULL;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572939229121" FOLDED="true" ID="ID_1180106607" MODIFIED="1573004621938" TEXT="&#x67e5;&#x627e;&#x6700;&#x5c0f;&#x503c;">
<node CREATED="1572939258721" ID="ID_1457016084" MODIFIED="1572939329426">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::minimum(BSTNode&lt;T&gt;* tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;while(tree-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      T BSTree&lt;T&gt;::minimum()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *p = minimum(mRoot);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (p != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return p-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (T)NULL;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572939372240" ID="ID_653026286" MODIFIED="1572939384854" TEXT="&#x67e5;&#x627e;&#x524d;&#x9a71;&#x548c;&#x540e;&#x7ee7;&#x4ee3;&#x7801;">
<node CREATED="1572939397232" FOLDED="true" ID="ID_1142868003" MODIFIED="1573004650617" TEXT="&#x67e5;&#x627e;&#x524d;&#x9a71;&#x4ee3;&#x7801;">
<node CREATED="1572939402840" ID="ID_1535973457" MODIFIED="1572939795687">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25214;&#32467;&#28857;(x)&#30340;&#21069;&#39537;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#23567;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#22823;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::predecessor(BSTNode&lt;T&gt; *x)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#23384;&#22312;&#24038;&#23401;&#23376;&#65292;&#21017;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#20026; &quot;&#20197;&#20854;&#24038;&#23401;&#23376;&#20026;<b>&#26681;&#30340;&#23376;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;</b>&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return maximum(x-&gt;left);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#27809;&#26377;&#24038;&#23401;&#23376;&#12290;&#21017;x&#26377;&#20197;&#19979;&#20004;&#31181;&#21487;&#33021;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#21491;&#23401;&#23376;&quot;&#65292;&#21017;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#20026; &quot;&#23427;&#30340;&#29238;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#24038;&#23401;&#23376;&quot;&#65292;&#21017;&#26597;&#25214;&quot;x&#30340;&#30340;&#29238;&#32467;&#28857;&#30340;&#29238;&#33410;&#28857;&#30452;&#21040;&#26377;&#19968;&#20010;&#33410;&#28857;&#26159;&#20854;&#29238;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#65292;&#24182;&#19988;&#35813;&#29238;&#32467;&#28857;&#35201;&#20855;&#26377;&#21491;&#23401;&#23376;&quot;&#65292;&#25214;&#21040;&#30340;&#36825;&#20010;&quot;&#26368;&#20302;&#30340;&#29238;&#32467;&#28857;&quot;&#23601;&#26159;&quot;x&#30340;&#21069;&#39537;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* y = x-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#20063;&#21487;&#33021;&#21040;&#26681;&#33410;&#28857;&#20063;&#25214;&#19981;&#21040;&#21017;&#36820;&#22238;&#31354;&#65292;&#35813;&#33410;&#28857;&#27809;&#26377;&#21069;&#39537;&#33410;&#28857;&#65292;&#23427;value&#26368;&#23567;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((y!=NULL) &amp;&amp; (x==y-&gt;left))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = y-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572939863997" FOLDED="true" ID="ID_847502892" MODIFIED="1574910005289" TEXT="&#x67e5;&#x627e;&#x540e;&#x7ee7;&#x8282;&#x70b9;&#x4ee3;&#x7801;">
<node CREATED="1572939871573" ID="ID_1410840350" MODIFIED="1572940062014">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25214;&#32467;&#28857;(x)&#30340;&#21518;&#32487;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#20108;&#21449;&#26641;&#20013;&#25968;&#25454;&#20540;&#22823;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::successor(BSTNode&lt;T&gt; *x)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#23384;&#22312;&#21491;&#23401;&#23376;&#65292;&#21017;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#20026; &quot;&#20197;&#20854;&#21491;&#23401;&#23376;&#20026;&#26681;&#30340;&#23376;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return minimum(x-&gt;right);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;x&#27809;&#26377;&#21491;&#23401;&#23376;&#12290;&#21017;x&#26377;&#20197;&#19979;&#20004;&#31181;&#21487;&#33021;&#65306;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (01) x&#26159;&quot;&#19968;&#20010;&#24038;&#23401;&#23376;&quot;&#65292;&#21017;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#20026; &quot;&#23427;&#30340;&#29238;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// (02) x&#26159;&quot;&#19968;&#20010;&#21491;&#23401;&#23376;&quot;&#65292;&#21017;&#26597;&#25214;&quot;x&#30340;&#30340;&#29238;&#32467;&#28857;&#30340;&#29238;&#33410;&#28857;&#30452;&#21040;&#26377;&#19968;&#20010;&#33410;&#28857;&#26159;&#20854;&#29238;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#65292;&#24182;&#19988;&#35813;&#29238;&#32467;&#28857;&#35201;&#20855;&#26377;&#24038;&#23401;&#23376;&quot;&#65292;&#25214;&#21040;&#30340;&#36825;&#20010;&quot;&#26368;&#20302;&#30340;&#29238;&#32467;&#28857;&quot;&#23601;&#26159;&quot;x&#30340;&#21518;&#32487;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt;* y = x-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((y!=NULL) &amp;&amp; (x==y-&gt;right))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = y-&gt;parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1572940170098" FOLDED="true" ID="ID_1229688481" MODIFIED="1573263569325" TEXT="&#x63d2;&#x5165;&#x8282;&#x70b9;&#x7684;&#x4ee3;&#x7801;">
<node CREATED="1572940176178" ID="ID_319389031" MODIFIED="1573004697288">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;&#25554;&#20837;&#21040;&#20108;&#21449;&#26641;&#20013;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20108;&#21449;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;z &#25554;&#20837;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::insert(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt;* z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *y = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *x = tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26597;&#25214;z&#30340;&#25554;&#20837;&#20301;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (z-&gt;key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;z-&gt;parent = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;&#25554;&#20837;&#30340;&#20540;&#27604;&#23427;&#29238;&#33410;&#28857;&#22823;&#36824;&#26159;&#23567;&#20915;&#23450;&#23427;&#25104;&#20026;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#36824;&#26159;&#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (z-&gt;key &lt; y-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;left = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;right = z;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::insert(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *z=NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&#26032;&#24314;&#32467;&#28857;&#22833;&#36133;&#65292;&#21017;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z=new BSTNode&lt;T&gt;(key,NULL,NULL,NULL)) == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;insert(mRoot, z);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572940807918" ID="ID_1618234660" MODIFIED="1574909965062" TEXT="&#x5220;&#x9664;&#x8282;&#x70b9;&#x4ee3;&#x7801;">
<node CREATED="1572940819486" ID="ID_1923316095" MODIFIED="1573262785518">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#21024;&#38500;&#32467;&#28857;(z)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20108;&#21449;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;z &#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      //&#19977;&#31181;&#21487;&#33021;&#65292;&#34987;&#21024;&#38500;&#33410;&#28857;&#27809;&#26377;&#23376;&#33410;&#28857;&#65292;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;&#20004;&#20010;&#23376;&#33410;&#28857;
    </p>
    <p>
      //&#27809;&#26377;&#23376;&#33410;&#28857;&#25110;&#21482;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;y&#20026;&#34987;&#21024;&#33410;&#28857;
    </p>
    <p>
      //&#27809;&#26377;&#23376;&#33410;&#28857;&#65292;&#30452;&#25509;&#21024;&#38500;&#65292;&#23558;&#23427;&#29238;&#33410;&#28857;&#25351;&#21521;&#23427;&#30340;&#25351;&#38024;&#25351;&#21521;&#31354;
    </p>
    <p>
      //&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;&#21024;&#38500;&#21518;&#29992;&#23376;&#33410;&#28857;&#20195;&#26367;&#65292;&#23558;&#23427;&#29238;&#33410;&#28857;&#25351;&#21521;&#23427;&#30340;&#25351;&#38024;&#25351;&#21521;&#23427;&#30340;&#23376;&#33410;&#28857;
    </p>
    <p>
      //&#20004;&#20010;&#23376;&#33410;&#28857;&#65292;&#21017;y&#35774;&#20026;&#34987;&#21024;&#33410;&#28857;&#30340;&#21518;&#32487;&#33410;&#28857;&#65292;&#23558;&#21518;&#32487;&#33410;&#28857;&#30340;&#20540;&#19982;&#34987;&#21024;&#30340;&#26367;&#25442;&#65292;&#28982;&#21518;&#23558;&#21518;&#32487;&#33410;&#28857;&#30340;&#23376;&#33410;&#28857;&#26367;&#20195;&#21518;&#32487;&#33410;&#28857;&#30340;&#20301;&#32622;
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      BSTNode&lt;T&gt;* BSTree&lt;T&gt;::remove(BSTNode&lt;T&gt;* &amp;tree, BSTNode&lt;T&gt; *z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *x=NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *y=NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z-&gt;left == NULL) || (z-&gt;right == NULL) )
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = successor(z);
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;y&#30340;&#24038;&#33410;&#28857;&#26159;&#21542;&#20026;&#31354;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = y-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;//&#21028;&#26029;y&#30340;&#24038;&#25110;&#32773;&#21491;&#33410;&#28857;&#26159;&#21542;&#20026;&#31354;&#65292;&#19981;&#20026;&#31354;&#21017;&#26367;&#20195;y
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;parent = y-&gt;parent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;parent == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (y == y-&gt;parent-&gt;left)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;left = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;right = x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y != z)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z-&gt;key = y-&gt;key;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return y;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::remove(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;BSTNode&lt;T&gt; *z, *node;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z = search(mRoot, key)) != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ( (node = remove(mRoot, z)) != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete node;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572942009479" FOLDED="true" ID="ID_283394213" MODIFIED="1573004966903" TEXT="&#x6253;&#x5370;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1572942014060" ID="ID_1072914054" MODIFIED="1572942021478">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#25171;&#21360;&quot;&#20108;&#21449;&#26597;&#25214;&#26641;&quot;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* key&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;-- &#33410;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;* direction&#160;&#160;--&#160;&#160;0&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#26681;&#33410;&#28857;;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;-1&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#23427;&#30340;&#29238;&#32467;&#28857;&#30340;&#24038;&#23401;&#23376;;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#65292;&#34920;&#31034;&#35813;&#33410;&#28857;&#26159;&#23427;&#30340;&#29238;&#32467;&#28857;&#30340;&#21491;&#23401;&#23376;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::print(BSTNode&lt;T&gt;* tree, T key, int direction)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if(tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(direction==0)&#160;&#160;&#160;&#160;// tree&#26159;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; setw(2) &lt;&lt; tree-&gt;key &lt;&lt; &quot; is root&quot; &lt;&lt; endl;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// tree&#26159;&#20998;&#25903;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; setw(2) &lt;&lt; tree-&gt;key &lt;&lt; &quot; is &quot; &lt;&lt; setw(2) &lt;&lt; key &lt;&lt; &quot;'s &quot;&#160;&#160;&lt;&lt; setw(12) &lt;&lt; (direction==1?&quot;right child&quot; : &quot;left child&quot;) &lt;&lt; endl;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(tree-&gt;left, tree-&gt;key, -1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(tree-&gt;right,tree-&gt;key,&#160;&#160;1);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::print()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (mRoot != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(mRoot, mRoot-&gt;key, 0);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1572942033197" FOLDED="true" ID="ID_1052133664" MODIFIED="1573004813024" TEXT="&#x9500;&#x6bc1;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1572942066364" ID="ID_1787113150" MODIFIED="1572942085870">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#38144;&#27585;&#20108;&#21449;&#26641;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::destroy(BSTNode&lt;T&gt;* &amp;tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destroy(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destroy(tree-&gt;right);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;delete tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree=NULL;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void BSTree&lt;T&gt;::destroy()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;destroy(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1573177229886" ID="ID_1371648324" MODIFIED="1573177236857" TEXT="AVL&#x6811;">
<node CREATED="1573177242468" ID="ID_569188845" MODIFIED="1573177250218" TEXT="&#x7279;&#x70b9;">
<node CREATED="1573177251108" ID="ID_67261820" MODIFIED="1573177270626" TEXT="&#x6700;&#x5148;&#x53d1;&#x660e;&#x81ea;&#x5e73;&#x8861;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#xff0c;&#x4e5f;&#x88ab;&#x79f0;&#x4e3a;&#x9ad8;&#x5ea6;&#x5e73;&#x8861;&#x6811;"/>
<node CREATED="1573177285475" ID="ID_29548509" MODIFIED="1573177286962" TEXT="&#x5b83;&#x7684;&#x7279;&#x70b9;&#x662f;&#xff1a;AVL&#x6811;&#x4e2d;&#x4efb;&#x4f55;&#x8282;&#x70b9;&#x7684;&#x4e24;&#x4e2a;&#x5b50;&#x6811;&#x7684;&#x9ad8;&#x5ea6;&#x6700;&#x5927;&#x5dee;&#x522b;&#x4e3a;1&#x3002;"/>
<node CREATED="1573177317499" ID="ID_498409865" MODIFIED="1573177319225" TEXT="AVL&#x6811;&#x7684;&#x67e5;&#x627e;&#x3001;&#x63d2;&#x5165;&#x548c;&#x5220;&#x9664;&#x5728;&#x5e73;&#x5747;&#x548c;&#x6700;&#x574f;&#x60c5;&#x51b5;&#x4e0b;&#x90fd;&#x662f;O(logn)&#x3002;"/>
<node CREATED="1573438093365" ID="ID_1608251237" MODIFIED="1573438107597" TEXT="&#x662f;&#x4e00;&#x79cd;&#x7279;&#x6b8a;&#x7684;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;"/>
</node>
<node CREATED="1573181317511" ID="ID_758338482" MODIFIED="1573181323385" TEXT="&#x76ee;&#x7684;">
<node CREATED="1573181324118" ID="ID_1018531834" MODIFIED="1573181343948" TEXT="&#x4f7f;&#x5176;&#x4e0d;&#x4f1a;&#x5f62;&#x6210;&#x6781;&#x7aef;&#x7684;&#x4e8c;&#x53c9;&#x6811;"/>
</node>
<node CREATED="1573181355326" ID="ID_255258065" MODIFIED="1573181358540" TEXT="&#x5b9e;&#x73b0;&#x4ee3;&#x7801;">
<node CREATED="1573181391133" FOLDED="true" ID="ID_985425062" MODIFIED="1573185043399" TEXT="AVL&#x6811;&#x8282;&#x70b9;">
<node CREATED="1573181398789" ID="ID_1184188866" MODIFIED="1573181450489">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class AVLTreeNode{
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T key;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38190;&#23383;(&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int height;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#39640;&#24230;=&#23618;&#25968;&#65292;&#40664;&#35748;&#26681;&#33410;&#28857;&#20026;&#31532;&#19968;&#23618;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode *left;&#160;&#160;&#160;&#160;// &#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode *right;&#160;&#160;&#160;&#160;// &#21491;&#23401;&#23376;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode(T value, AVLTreeNode *l, AVLTreeNode *r):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key(value), height(0),left(l),right(r) {}
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573181479367" FOLDED="true" ID="ID_246155603" MODIFIED="1573197124696" TEXT="AVL&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1573181491925" ID="ID_191626251" MODIFIED="1573181495916">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class AVLTree {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt; *mRoot;&#160;&#160;&#160;&#160;// &#26681;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTree();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;~AVLTree();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#33719;&#21462;&#26641;&#30340;&#39640;&#24230;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int height();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#33719;&#21462;&#26641;&#30340;&#39640;&#24230;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int max(int a, int b);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;AVL&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* search(T key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;AVL&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* iterativeSearch(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#23567;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T minimum();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#22823;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T maximum();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;AVL&#26641;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;AVL&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;AVL&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print();
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#33719;&#21462;&#26641;&#30340;&#39640;&#24230;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int height(AVLTreeNode&lt;T&gt;* tree) ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder(AVLTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder(AVLTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;AVL&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder(AVLTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;AVL&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* search(AVLTreeNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;AVL&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* iterativeSearch(AVLTreeNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;AVL&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* minimum(AVLTreeNode&lt;T&gt;* tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;AVL&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* maximum(AVLTreeNode&lt;T&gt;* tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LL&#65306;&#24038;&#24038;&#23545;&#24212;&#30340;&#24773;&#20917;(&#24038;&#21333;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* leftLeftRotation(AVLTreeNode&lt;T&gt;* k2);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// RR&#65306;&#21491;&#21491;&#23545;&#24212;&#30340;&#24773;&#20917;(&#21491;&#21333;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* rightRightRotation(AVLTreeNode&lt;T&gt;* k1);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// LR&#65306;&#24038;&#21491;&#23545;&#24212;&#30340;&#24773;&#20917;(&#24038;&#21452;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* leftRightRotation(AVLTreeNode&lt;T&gt;* k3);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// RL&#65306;&#21491;&#24038;&#23545;&#24212;&#30340;&#24773;&#20917;(&#21491;&#21452;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* rightLeftRotation(AVLTreeNode&lt;T&gt;* k1);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(z)&#25554;&#20837;&#21040;AVL&#26641;(tree)&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* insert(AVLTreeNode&lt;T&gt;* &amp;tree, T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;AVL&#26641;(tree)&#20013;&#30340;&#32467;&#28857;(z)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* remove(AVLTreeNode&lt;T&gt;* &amp;tree, AVLTreeNode&lt;T&gt;* z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;AVL&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy(AVLTreeNode&lt;T&gt;* &amp;tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;AVL&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print(AVLTreeNode&lt;T&gt;* tree, T key, int direction);
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1573181514892" ID="ID_1445043819" MODIFIED="1573181554938" TEXT="&#x57fa;&#x672c;&#x91cd;&#x8f7d;&#x4e86;&#x6240;&#x6709;&#x51fd;&#x6570;&#xff0c;&#x5176;&#x4e2d;private&#x5185;&#x7684;&#x4e3a;&#x5185;&#x90e8;&#x63a5;&#x53e3;&#x51fd;&#x6570;&#xff0c;public&#x4e3a;&#x5916;&#x90e8;&#x63a5;&#x53e3;"/>
</node>
<node CREATED="1573181559876" ID="ID_306807181" MODIFIED="1573450876630" TEXT="&#x51fd;&#x6570;&#x5b9a;&#x4e49;&#x4ee3;&#x7801;">
<node CREATED="1573181810682" FOLDED="true" ID="ID_509646177" MODIFIED="1573265316050" TEXT="&#x83b7;&#x53d6;&#x6811;&#x7684;&#x9ad8;&#x5ea6;&#x4ee3;&#x7801;">
<node CREATED="1573181831146" ID="ID_1901428269" MODIFIED="1573181849075">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#33719;&#21462;&#26641;&#30340;&#39640;&#24230;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      int AVLTree&lt;T&gt;::height(AVLTreeNode&lt;T&gt;* tree)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return tree-&gt;height;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return 0;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      int AVLTree&lt;T&gt;::height()
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return height(mRoot);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1573181876850" ID="ID_436383060" MODIFIED="1573181895526">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p http-equiv="content-type" content="text/html; charset=utf-8">
      <font color="#008000" size="3">&#20851;&#20110;&#39640;&#24230;&#65292;&#26377;&#30340;&#22320;&#26041;&#23558;&quot;&#31354;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#26159;-1&quot;&#65292;&#32780;&#26412;&#25991;&#37319;&#29992;</font><a href="http://zh.wikipedia.org/zh-cn/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)"><u><font size="3">&#32500;&#22522;&#30334;&#31185;</font></u></a><font color="#008000" size="3">&#19978;&#30340;&#23450;&#20041;&#65306; </font>
    </p>
    <p http-equiv="content-type" content="text/html; charset=utf-8">
      <font color="#008000" size="3">&#26641;&#30340;&#39640;&#24230;&#20026;&#26368;&#22823;&#23618;&#27425;&#12290;&#21363;&#31354;&#30340;&#20108;&#21449;&#26641;&#30340;&#39640;&#24230;&#26159;0&#65292;&#38750;&#31354;&#26641;&#30340;&#39640;&#24230;&#31561;&#20110;&#23427;&#30340;&#26368;&#22823; </font>
    </p>
    <p http-equiv="content-type" content="text/html; charset=utf-8">
      <font color="#008000" size="3">&#23618;&#27425;(&#26681;&#30340;&#23618;&#27425;&#20026;1&#65292;&#26681;&#30340;&#23376;&#33410;&#28857;&#20026;&#31532;2&#23618;&#65292;&#20381;&#27425;&#31867;&#25512;)&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573181907554" ID="ID_1623486103" MODIFIED="1573263728649" TEXT="&#x6bd4;&#x8f83;&#x5927;&#x5c0f;&#x4ee3;&#x7801;">
<node CREATED="1573181917737" ID="ID_150135687" MODIFIED="1573181925057">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#27604;&#36739;&#20004;&#20010;&#20540;&#30340;&#22823;&#23567;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      int AVLTree&lt;T&gt;::max(int a, int b)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return a&gt;b ? a : b;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573182012361" FOLDED="true" ID="ID_1116948967" MODIFIED="1574909950421" TEXT="&#x65cb;&#x8f6c;">
<node CREATED="1573182016681" ID="ID_727516759" MODIFIED="1573182018095" TEXT="&#x76ee;&#x7684;">
<node CREATED="1573182019656" ID="ID_1829986362" MODIFIED="1573182050314">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22914;&#26524;&#22312;AVL&#26641;&#20013;&#36827;&#34892;&#25554;&#20837;&#25110;&#21024;&#38500;&#33410;&#28857;&#21518;&#65292;&#21487;&#33021;&#23548;&#33268;AVL&#26641;&#22833;&#21435;&#24179;&#34913;&#12290;
    </p>
    <p>
      AVL&#22833;&#21435;&#24179;&#34913;&#20043;&#21518;&#65292;&#21487;&#20197;&#36890;&#36807;&#26059;&#36716;&#20351;&#20854;&#24674;&#22797;&#24179;&#34913;&#65292;&#19979;&#38754;&#20998;&#21035;&#20171;&#32461;
    </p>
    <p>
      &quot;LL(&#24038;&#24038;)&#65292;LR(&#24038;&#21491;)&#65292;RR(&#21491;&#21491;)&#21644;RL(&#21491;&#24038;)&quot;&#36825;4&#31181;&#24773;&#20917;&#23545;&#24212;&#30340;&#26059;&#36716;&#20195;&#30721;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573184156615" ID="ID_1807635381" MODIFIED="1573450915013" TEXT="&#x8981;&#x65cb;&#x8f6c;&#x7684;&#x5931;&#x53bb;&#x5e73;&#x8861;&#x7684;AVL&#x6811;">
<node CREATED="1573184196497" ID="ID_462958159" MODIFIED="1573184356628">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <img src="../Pictures/选区_035.png" />
  </body>
</html></richcontent>
</node>
<node CREATED="1573184402327" ID="ID_1771284828" MODIFIED="1573184407294" TEXT="&#x4ecb;&#x7ecd;">
<node CREATED="1573184407959" ID="ID_1244342243" MODIFIED="1573184439557">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p http-equiv="content-type" content="text/html; charset=utf-8">
      <font color="#000000" size="3">(1)<strong>&#160;LL</strong>&#65306;LeftLeft&#65292;&#20063;&#31216;&#20026;&quot;&#24038;&#24038;&quot;&#12290;&#25554;&#20837;&#25110;&#21024;&#38500;&#19968;&#20010;&#33410;&#28857;&#21518;&#65292;&#26681;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#30340;&#24038;&#23376;&#26641;&#36824;&#26377;&#38750;&#31354;&#23376;&#33410;&#28857;&#65292;&#23548;&#33268;&quot;&#26681;&#30340;&#24038;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#27604;&quot;&#26681;&#30340;&#21491;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#22823;2&#65292;&#23548;&#33268;AVL&#26641;&#22833;&#21435;&#20102;&#24179;&#34913;&#12290;</font><font size="3"><br size="3" /></font>
    </p>
    <p>
      <font color="#000000" size="3">(2)<strong>&#160;LR</strong>&#65306;LeftRight&#65292;&#20063;&#31216;&#20026;&quot;&#24038;&#21491;&quot;&#12290;&#25554;&#20837;&#25110;&#21024;&#38500;&#19968;&#20010;&#33410;&#28857;&#21518;&#65292;&#26681;&#33410;&#28857;&#30340;&#24038;&#23376;&#26641;&#30340;&#21491;&#23376;&#26641;&#36824;&#26377;&#38750;&#31354;&#23376;&#33410;&#28857;&#65292;&#23548;&#33268;&quot;&#26681;&#30340;&#24038;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#27604;&quot;&#26681;&#30340;&#21491;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#22823;2&#65292;&#23548;&#33268;AVL&#26641;&#22833;&#21435;&#20102;&#24179;&#34913;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">(3)<strong>&#160;RL</strong>&#65306;RightLeft&#65292;&#31216;&#20026;&quot;&#21491;&#24038;&quot;&#12290;&#25554;&#20837;&#25110;&#21024;&#38500;&#19968;&#20010;&#33410;&#28857;&#21518;&#65292;&#26681;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#30340;&#24038;&#23376;&#26641;&#36824;&#26377;&#38750;&#31354;&#23376;&#33410;&#28857;&#65292;&#23548;&#33268;&quot;&#26681;&#30340;&#21491;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#27604;&quot;&#26681;&#30340;&#24038;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#22823;2&#65292;&#23548;&#33268;AVL&#26641;&#22833;&#21435;&#20102;&#24179;&#34913;&#12290;</font><font size="3"><br size="3" /></font>
    </p>
    <p>
      <font color="#000000" size="3">(4)<strong>&#160;RR</strong>&#65306;RightRight&#65292;&#31216;&#20026;&quot;&#21491;&#21491;&quot;&#12290;&#25554;&#20837;&#25110;&#21024;&#38500;&#19968;&#20010;&#33410;&#28857;&#21518;&#65292;&#26681;&#33410;&#28857;&#30340;&#21491;&#23376;&#26641;&#30340;&#21491;&#23376;&#26641;&#36824;&#26377;&#38750;&#31354;&#23376;&#33410;&#28857;&#65292;&#23548;&#33268;&quot;&#26681;&#30340;&#21491;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#27604;&quot;&#26681;&#30340;&#24038;&#23376;&#26641;&#30340;&#39640;&#24230;&quot;&#22823;2&#65292;&#23548;&#33268;AVL&#26641;&#22833;&#21435;&#20102;&#24179;&#34913;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573182055177" ID="ID_1165774156" MODIFIED="1573183637087" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1573183637028" ID="ID_815062211" MODIFIED="1573183666495" TEXT="LL&#x65cb;&#x8f6c;">
<node CREATED="1573182060153" ID="ID_1739601090" MODIFIED="1573183642436" TEXT="LL&#x7684;&#x65cb;&#x8f6c;&#x4ee3;&#x7801;">
<node CREATED="1573182121088" ID="ID_1556511265" MODIFIED="1573183901583">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* LL&#65306;&#24038;&#24038;&#23545;&#24212;&#30340;&#24773;&#20917;(&#24038;&#21333;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;*k2&#20026;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;&#26059;&#36716;&#21518;&#30340;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::leftLeftRotation(AVLTreeNode&lt;T&gt;* k2)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* k1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1 = k2-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k2-&gt;left = k1-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1-&gt;right = k2;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;k2-&gt;height = max( height(k2-&gt;left), height(k2-&gt;right)) + 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1-&gt;height = max( height(k1-&gt;left), k2-&gt;height) + 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return k1;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573183787276" ID="ID_1727833924" MODIFIED="1573183864793" TEXT="&#x7406;&#x89e3;">
<node CREATED="1573183865291" ID="ID_1940821271" MODIFIED="1573183880011">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      LL&#26059;&#36716;&#26159;&#22260;&#32469;&quot;&#22833;&#21435;&#24179;&#34913;&#30340;AVL&#26681;&#33410;&#28857;&quot;&#36827;&#34892;&#30340;&#65292;&#20063;&#23601;&#26159;&#33410;&#28857;k2&#65307;&#32780;&#19988;&#30001;&#20110;&#26159;LL&#24773;&#20917;&#65292;
    </p>
    <p>
      &#21363;&#24038;&#24038;&#24773;&#20917;&#65292;&#23601;&#29992;&#25163;&#25235;&#30528;&quot;&#24038;&#23401;&#23376;&#65292;&#21363;k1&quot;&#20351;&#21170;&#25671;&#12290;&#23558;k1&#21464;&#25104;&#26681;&#33410;&#28857;&#65292;k2&#21464;&#25104;k1&#30340;&#21491;
    </p>
    <p>
      &#23376;&#26641;&#65292;&quot;k1&#30340;&#21491;&#23376;&#26641;&quot;&#21464;&#25104;&quot;k2&#30340;&#24038;&#23376;&#26641;&quot;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573183905395" FOLDED="true" ID="ID_1147411852" MODIFIED="1573184059815" TEXT="RR&#x65cb;&#x8f6c;">
<node CREATED="1573183930683" ID="ID_731971503" MODIFIED="1573183942017" TEXT="RR&#x65cb;&#x8f6c;&#x4ee3;&#x7801;">
<node CREATED="1573183942595" ID="ID_1305390323" MODIFIED="1573183967728">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* RR&#65306;&#21491;&#21491;&#23545;&#24212;&#30340;&#24773;&#20917;(&#21491;&#21333;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;*k1&#20026;&#21407;&#20808;&#30340;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;&#26059;&#36716;&#21518;&#30340;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::rightRightRotation(AVLTreeNode&lt;T&gt;* k1)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* k2;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;k2 = k1-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1-&gt;right = k2-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k2-&gt;left = k1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1-&gt;height = max( height(k1-&gt;left), height(k1-&gt;right)) + 1;
    </p>
    <p>
      &#160;&#160;&#160;&#160;k2-&gt;height = max( height(k2-&gt;right), k1-&gt;height) + 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return k2;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573184035554" ID="ID_610293878" MODIFIED="1573184038272" TEXT="&#x7406;&#x89e3;">
<node CREATED="1573184038906" ID="ID_581772399" MODIFIED="1573184057364" TEXT="&#x4e0e;LL&#x65cb;&#x8f6c;&#x76f8;&#x4f3c;"/>
</node>
</node>
<node CREATED="1573184060850" ID="ID_1134418365" MODIFIED="1573184070161" TEXT="LR&#x7684;&#x65cb;&#x8f6c;">
<node CREATED="1573184368767" FOLDED="true" ID="ID_771831458" MODIFIED="1573270487597" TEXT="LR&#x7684;&#x65cb;&#x8f6c;&#x4ee3;&#x7801;">
<node CREATED="1573184456967" ID="ID_1089366459" MODIFIED="1573184461580">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* LR&#65306;&#24038;&#21491;&#23545;&#24212;&#30340;&#24773;&#20917;(&#24038;&#21452;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;&#26059;&#36716;&#21518;&#30340;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::leftRightRotation(AVLTreeNode&lt;T&gt;* k3)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;k3-&gt;left = rightRightRotation(k3-&gt;left);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return leftLeftRotation(k3);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573184478375" ID="ID_184247496" MODIFIED="1573184483261" TEXT="&#x7406;&#x89e3;">
<node CREATED="1573184484079" ID="ID_1514748662" MODIFIED="1573184578600">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" size="3">LR&#22833;&#21435;&#24179;&#34913;&#30340;&#24773;&#20917;&#65292;&#38656;&#35201;&#32463;&#36807;&#20004;&#27425;&#26059;&#36716;&#25165;&#33021;&#35753;AVL&#26641;&#24674;&#22797;&#24179;&#34913;&#65292; </font>
    </p>
    <p>
      <font color="#000000" size="3">&#19968;&#27425;&#26681;&#33410;&#28857;&#24038;&#23376;&#26641;&#30340;RR&#26059;&#36716;&#65292;&#19968;&#27425;&#26681;&#33410;&#28857;&#30340;LL&#26059;&#36716;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573184060850" ID="ID_4915712" MODIFIED="1573184802566" TEXT="RL&#x7684;&#x65cb;&#x8f6c;">
<node CREATED="1573184368767" ID="ID_1128404868" MODIFIED="1573184806923" TEXT="RL&#x7684;&#x65cb;&#x8f6c;&#x4ee3;&#x7801;">
<node CREATED="1573184456967" ID="ID_1864338668" MODIFIED="1573184814688">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* RL&#65306;&#21491;&#24038;&#23545;&#24212;&#30340;&#24773;&#20917;(&#21491;&#21452;&#26059;&#36716;)&#12290;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;&#26059;&#36716;&#21518;&#30340;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::rightLeftRotation(AVLTreeNode&lt;T&gt;* k1)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;k1-&gt;right = leftLeftRotation(k1-&gt;right);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return rightRightRotation(k1);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573184478375" ID="ID_1365176645" MODIFIED="1573184483261" TEXT="&#x7406;&#x89e3;">
<node CREATED="1573184484079" ID="ID_17609827" MODIFIED="1573184865027">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#000000" size="3">LR&#22833;&#21435;&#24179;&#34913;&#30340;&#24773;&#20917;&#65292;&#38656;&#35201;&#32463;&#36807;&#20004;&#27425;&#26059;&#36716;&#25165;&#33021;&#35753;AVL&#26641;&#24674;&#22797;&#24179;&#34913;&#65292; </font>
    </p>
    <p>
      <font color="#000000" size="3">&#19968;&#27425;&#26681;&#33410;&#28857;&#21491;&#23376;&#26641;&#30340;LL&#26059;&#36716;&#65292;&#19968;&#27425;&#26681;&#33410;&#28857;&#30340;RR&#26059;&#36716;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573184885054" ID="ID_1545770801" MODIFIED="1573184890931" TEXT="&#x63d2;&#x5165;&#x64cd;&#x4f5c;">
<node CREATED="1573184891652" FOLDED="true" ID="ID_397701287" MODIFIED="1573434220869" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1573184894707" ID="ID_1146454115" MODIFIED="1573185601455">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;&#25554;&#20837;&#21040;AVL&#26641;&#20013;&#65292;&#24182;&#36820;&#22238;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree AVL&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;key &#25554;&#20837;&#30340;&#32467;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::insert(AVLTreeNode&lt;T&gt;* &amp;tree, T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26032;&#24314;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = new AVLTreeNode&lt;T&gt;(key, NULL, NULL);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tree==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; &quot;ERROR: create avltree node failed!&quot; &lt;&lt; endl;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (key &lt; tree-&gt;key) // &#24212;&#35813;&#23558;key&#25554;&#20837;&#21040;&quot;tree&#30340;&#24038;&#23376;&#26641;&quot;&#30340;&#24773;&#20917;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;left = insert(tree-&gt;left, key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25554;&#20837;&#33410;&#28857;&#21518;&#65292;&#33509;AVL&#26641;&#22833;&#21435;&#24179;&#34913;&#65292;&#21017;&#36827;&#34892;&#30456;&#24212;&#30340;&#35843;&#33410;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(tree-&gt;left) - height(tree-&gt;right) == 2)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &lt; tree-&gt;left-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = leftLeftRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = leftRightRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (key &gt; tree-&gt;key) // &#24212;&#35813;&#23558;key&#25554;&#20837;&#21040;&quot;tree&#30340;&#21491;&#23376;&#26641;&quot;&#30340;&#24773;&#20917;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;right = insert(tree-&gt;right, key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25554;&#20837;&#33410;&#28857;&#21518;&#65292;&#33509;AVL&#26641;&#22833;&#21435;&#24179;&#34913;&#65292;&#21017;&#36827;&#34892;&#30456;&#24212;&#30340;&#35843;&#33410;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(tree-&gt;right) - height(tree-&gt;left) == 2)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &gt; tree-&gt;right-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = rightRightRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = rightLeftRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else (key == tree-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; &quot;&#28155;&#21152;&#22833;&#36133;&#65306;&#19981;&#20801;&#35768;&#28155;&#21152;&#30456;&#21516;&#30340;&#33410;&#28857;&#65281;&quot; &lt;&lt; endl;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree-&gt;height = max( height(tree-&gt;left), height(tree-&gt;right)) + 1;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void AVLTree&lt;T&gt;::insert(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;insert(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573184921588" ID="ID_1148060010" MODIFIED="1573184953801" TEXT="&#x5220;&#x9664;&#x64cd;&#x4f5c;">
<node CREATED="1573184925987" FOLDED="true" ID="ID_455733821" MODIFIED="1573434222581" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1573184933011" ID="ID_1243618856" MODIFIED="1573197142037">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#21024;&#38500;&#32467;&#28857;(z)&#65292;&#36820;&#22238;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree AVL&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;z &#24453;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      //&#36827;&#20837;&#35813;&#20989;&#25968;&#21518;&#39318;&#20808;&#21028;&#26029;&#26159;&#21542;&#26159;&#26681;&#33410;&#28857;&#65292;&#26377;&#19977;&#31181;&#24773;&#20917;&#65292;
    </p>
    <p>
      //1.&#27604;tree&#33410;&#28857;&#23567;&#12290;2.&#27604;tree&#33410;&#28857;&#22823;&#12290;3.&#31561;&#20110;tree&#33410;&#28857;
    </p>
    <p>
      //&#31532;&#19968;&#31181;&#24773;&#20917;&#65292;&#21017;&#32487;&#32493;&#21521;&#19979;&#36882;&#24402;&#65292;&#22312;&#24038;&#23376;&#26641;&#19979;&#21024;&#38500;&#65292;&#36882;&#24402;&#24038;&#23376;&#26641;&#33410;&#28857;&#21024;&#38500;&#25104;&#21151;&#21518;&#21521;&#19978;&#19968;&#36335;&#21028;&#26029;&#21491;&#23376;&#26641;&#20943;&#21435;&#24038;&#23376;&#26641;&#39640;&#24230;&#26159;&#21542;&#20026;2&#65292;&#20026;2&#21017;&#22833;&#21435;&#20102;&#24179;&#34913;&#65292;&#33509;&#22833;&#21435;&#24179;&#34913;&#21017;&#32487;&#32493;&#21028;&#26029;&#35813;&#21491;&#23376;&#26641;&#30340;&#24038;&#21491;&#23376;&#33410;&#28857;&#39640;&#24230;&#26469;&#21028;&#26029;&#26159;&#25191;&#34892;RL&#26059;&#36716;(&#24038;&gt;&#21491;)&#36824;&#26159;RR&#26059;&#36716;&#65288;else&#65289;
    </p>
    <p>
      //&#31532;&#20108;&#31181;&#24773;&#20917;&#65292;&#32487;&#32493;&#21521;&#19979;&#36882;&#24402;&#65292;&#22312;&#21491;&#23376;&#26641;&#19979;&#36882;&#24402;&#21024;&#38500;&#65292;&#19982;&#31532;&#19968;&#31181;&#21028;&#26029;&#31867;&#20284;
    </p>
    <p>
      //&#31532;&#19977;&#31181;&#24773;&#20917;&#65292;tree&#20026;&#35201;&#21024;&#38500;&#30340;&#33410;&#28857;&#65292;&#21017;&#32487;&#32493;&#21028;&#26029;tree&#26159;&#21542;&#26377;&#23376;&#26641;&#65292;&#33509;&#24038;&#21491;&#23376;&#26641;&#37117;&#23384;&#22312;&#65292;&#21017;&#21028;&#26029;&#24038;&#21491;&#23376;&#26641;&#30340;&#39640;&#24230;&#65292;&#22914;&#26524;&#24038;&#23376;&#26641;&#27604;&#21491;&#23376;&#26641;&#35201;&#39640;&#65292;&#21017;&#23558;&#24038;&#23376;&#26641;&#30340;&#26368;&#22823;&#33410;&#28857;&#30340;&#20540;&#36171;&#20540;&#32473;tree&#65292;&#21024;&#38500;&#26368;&#22823;&#33410;&#28857;&#65292;&#21453;&#20043;&#21017;&#25214;&#21491;&#23376;&#26641;&#30340;&#26368;&#23567;&#33410;&#28857;&#65307;&#33509;&#37117;&#20026;&#37117;&#31354;&#25110;&#32773;&#21482;&#26377;&#24038;&#23376;
    </p>
    <p>
      &#26641;&#25110;&#21491;&#23376;&#26641;&#65292;&#21017;&#23558; tree&#36716;&#32473;tmp&#65292;&#29992;&#24038;&#23376;&#26641;&#25110;&#21491;&#23376;&#26641;&#20195;&#26367;tree&#65292;delete tmp
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      AVLTreeNode&lt;T&gt;* AVLTree&lt;T&gt;::remove(AVLTreeNode&lt;T&gt;* &amp;tree, AVLTreeNode&lt;T&gt;* z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26681;&#20026;&#31354; &#25110;&#32773; &#27809;&#26377;&#35201;&#21024;&#38500;&#30340;&#33410;&#28857;&#65292;&#30452;&#25509;&#36820;&#22238;NULL&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree==NULL || z==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (z-&gt;key &lt; tree-&gt;key)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24453;&#21024;&#38500;&#30340;&#33410;&#28857;&#22312;&quot;tree&#30340;&#24038;&#23376;&#26641;&quot;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;left = remove(tree-&gt;left, z);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#33410;&#28857;&#21518;&#65292;&#33509;AVL&#26641;&#22833;&#21435;&#24179;&#34913;&#65292;&#21017;&#36827;&#34892;&#30456;&#24212;&#30340;&#35843;&#33410;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(tree-&gt;right) - height(tree-&gt;left) == 2)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt; *r =&#160;&#160;tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(r-&gt;left) &gt; height(r-&gt;right))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = rightLeftRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = rightRightRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (z-&gt;key &gt; tree-&gt;key)// &#24453;&#21024;&#38500;&#30340;&#33410;&#28857;&#22312;&quot;tree&#30340;&#21491;&#23376;&#26641;&quot;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;right = remove(tree-&gt;right, z);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#33410;&#28857;&#21518;&#65292;&#33509;AVL&#26641;&#22833;&#21435;&#24179;&#34913;&#65292;&#21017;&#36827;&#34892;&#30456;&#24212;&#30340;&#35843;&#33410;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(tree-&gt;left) - height(tree-&gt;right) == 2)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt; *l =&#160;&#160;tree-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(l-&gt;right) &gt; height(l-&gt;left))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = leftRightRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = leftLeftRotation(tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else&#160;&#160;&#160;&#160;// tree&#26159;&#23545;&#24212;&#35201;&#21024;&#38500;&#30340;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// tree&#30340;&#24038;&#21491;&#23401;&#23376;&#37117;&#38750;&#31354;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ((tree-&gt;left!=NULL) &amp;&amp; (tree-&gt;right!=NULL))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (height(tree-&gt;left) &gt; height(tree-&gt;right))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22914;&#26524;tree&#30340;&#24038;&#23376;&#26641;&#27604;&#21491;&#23376;&#26641;&#39640;&#65307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21017;(01)&#25214;&#20986;tree&#30340;&#24038;&#23376;&#26641;&#20013;&#30340;&#26368;&#22823;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;&#160;&#160;(02)&#23558;&#35813;&#26368;&#22823;&#33410;&#28857;&#30340;&#20540;&#36171;&#20540;&#32473;tree&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;&#160;&#160;(03)&#21024;&#38500;&#35813;&#26368;&#22823;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36825;&#31867;&#20284;&#20110;&#29992;&quot;tree&#30340;&#24038;&#23376;&#26641;&#20013;&#26368;&#22823;&#33410;&#28857;&quot;&#20570;&quot;tree&quot;&#30340;&#26367;&#36523;&#65307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#37319;&#29992;&#36825;&#31181;&#26041;&#24335;&#30340;&#22909;&#22788;&#26159;&#65306;&#21024;&#38500;&quot;tree&#30340;&#24038;&#23376;&#26641;&#20013;&#26368;&#22823;&#33410;&#28857;&quot;&#20043;&#21518;&#65292;AVL&#26641;&#20173;&#28982;&#26159;&#24179;&#34913;&#30340;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* max = maximum(tree-&gt;left);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;key = max-&gt;key;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;left = remove(tree-&gt;left, max);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22914;&#26524;tree&#30340;&#24038;&#23376;&#26641;&#19981;&#27604;&#21491;&#23376;&#26641;&#39640;(&#21363;&#23427;&#20204;&#30456;&#31561;&#65292;&#25110;&#21491;&#23376;&#26641;&#27604;&#24038;&#23376;&#26641;&#39640;1)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21017;(01)&#25214;&#20986;tree&#30340;&#21491;&#23376;&#26641;&#20013;&#30340;&#26368;&#23567;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;&#160;&#160;(02)&#23558;&#35813;&#26368;&#23567;&#33410;&#28857;&#30340;&#20540;&#36171;&#20540;&#32473;tree&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;&#160;&#160;(03)&#21024;&#38500;&#35813;&#26368;&#23567;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#36825;&#31867;&#20284;&#20110;&#29992;&quot;tree&#30340;&#21491;&#23376;&#26641;&#20013;&#26368;&#23567;&#33410;&#28857;&quot;&#20570;&quot;tree&quot;&#30340;&#26367;&#36523;&#65307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#37319;&#29992;&#36825;&#31181;&#26041;&#24335;&#30340;&#22909;&#22788;&#26159;&#65306;&#21024;&#38500;&quot;tree&#30340;&#21491;&#23376;&#26641;&#20013;&#26368;&#23567;&#33410;&#28857;&quot;&#20043;&#21518;&#65292;AVL&#26641;&#20173;&#28982;&#26159;&#24179;&#34913;&#30340;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* min = minimum(tree-&gt;right);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;key = min-&gt;key;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;right = remove(tree-&gt;right, min);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* tmp = tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = (tree-&gt;left!=NULL) ? tree-&gt;left : tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete tmp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void AVLTree&lt;T&gt;::remove(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;AVLTreeNode&lt;T&gt;* z;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z = search(mRoot, key)) != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mRoot = remove(mRoot, z);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573184954867" ID="ID_750601567" MODIFIED="1573434223553" TEXT="&#x6ce8;&#x610f;&#xff1a;">
<node CREATED="1573184957851" ID="ID_1249803967" MODIFIED="1573185020678">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font color="#010101">&#20851;&#20110;AVL&#26641;&#30340;&quot;&#21069;&#24207;&#36941;&#21382;&quot;&#12289;&quot;&#20013;&#24207;&#36941;&#21382;&quot;&#12289;&quot;&#21518;&#24207;&#36941;&#21382;&quot;&#12289;&quot;&#26368;&#22823;&#20540;&quot;&#12289;&quot;&#26368;&#23567;&#20540;&quot;&#12289; </font>
    </p>
    <p>
      <font color="#010101">&quot;&#26597;&#25214;&quot;&#12289;&quot;&#25171;&#21360;&quot;&#12289;&quot;&#38144;&#27585;&quot;&#31561;&#25509;&#21475;&#19982;&quot;<a href="http://www.cnblogs.com/skywang12345/p/3576373.html">&#20108;&#21449;&#26597;&#25214;&#26641;</a>&quot;&#22522;&#26412;&#19968;&#26679;&#65292;&#36825;&#20123;&#25805;&#20316;&#22312; </font>
    </p>
    <p>
      <font color="#010101">&quot;<a href="http://www.cnblogs.com/skywang12345/p/3576373.html">&#20108;&#21449;&#26597;&#25214;&#26641;</a>&quot;&#20013;&#24050;&#32463;&#20171;&#32461;&#36807;&#20102;&#65292;&#36825;&#37324;&#23601;&#19981;&#20877;&#21333;&#29420;&#20171;&#32461;&#20102;&#12290;&#24403;&#28982;&#65292;&#21518;&#25991;&#32473; </font>
    </p>
    <p>
      <font color="#010101">&#20986;&#30340;AVL&#26641;&#30340;&#23436;&#25972;&#28304;&#30721;&#20013;&#65292;&#26377;&#32473;&#20986;&#36825;&#20123;API&#30340;&#23454;&#29616;&#20195;&#30721;&#12290;&#36825;&#20123;&#25509;&#21475;&#24456;&#31616;&#21333; &#65292; </font>
    </p>
    <p>
      <font color="#010101">Please RTFSC(Read The Fucking Source Code)&#65281;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1573438043167" ID="ID_124856801" MODIFIED="1573438068344" TEXT="&#x4f38;&#x5c55;&#x6811;">
<node CREATED="1573438072118" ID="ID_1688677203" MODIFIED="1573438079442" TEXT="&#x4ecb;&#x7ecd;">
<node CREATED="1573438079989" ID="ID_1742597123" MODIFIED="1573438124410">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font color="#000000" size="3">&#20280;&#23637;&#26641;(Splay Tree)&#26159;&#29305;&#27530;&#30340;&#20108;&#21449;&#26597;&#25214;&#26641;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#23427;&#30340;&#29305;&#27530;&#26159;&#25351;&#65292;&#23427;&#38500;&#20102;&#26412;&#36523;&#26159;&#26869;&#20108;&#21449;&#26597;&#25214;&#26641;&#20043;&#22806;&#65292;&#23427;&#36824;&#20855;&#22791;&#19968;&#20010;&#29305;&#28857;: &#24403;&#26576;&#20010;&#33410;&#28857;&#34987;&#35775;&#38382;&#26102;&#65292;&#20280;&#23637;&#26641;&#20250;&#36890;&#36807;&#26059;&#36716;&#20351;&#35813;&#33410;&#28857;&#25104;&#20026;&#26641;&#26681;&#12290;&#36825;&#26679;&#20570;&#30340;&#22909;&#22788;&#26159;&#65292;&#19979;&#27425;&#35201;&#35775;&#38382;&#35813;&#33410;&#28857;&#26102;&#65292;&#33021;&#22815;&#36805;&#36895;&#30340;&#35775;&#38382;&#21040;&#35813;&#33410;&#28857;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573438131789" ID="ID_175430807" MODIFIED="1573438134594" TEXT="&#x5b9e;&#x73b0;&#x4ee3;&#x7801;">
<node CREATED="1573438135149" ID="ID_1485676061" MODIFIED="1573438155061" TEXT="&#x8282;&#x70b9;&#x4ee3;&#x7801;">
<node CREATED="1573438142765" ID="ID_1873939799" MODIFIED="1573438149054">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class SplayTreeNode{
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T key;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38190;&#23383;(&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode *left;&#160;&#160;&#160;&#160;// &#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode *right;&#160;&#160;&#160;&#160;// &#21491;&#23401;&#23376;
    </p>
    <p>
      
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode():left(NULL),right(NULL) {}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode(T value, SplayTreeNode *l, SplayTreeNode *r):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key(value), left(l),right(r) {}
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573438181117" FOLDED="true" ID="ID_1906270075" MODIFIED="1573438197312" TEXT="&#x4f38;&#x5c55;&#x6811;&#x4ee3;&#x7801;">
<node CREATED="1573438187397" ID="ID_1391193355" MODIFIED="1573438191176">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class SplayTree {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; *mRoot;&#160;&#160;&#160;&#160;// &#26681;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTree();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;~SplayTree();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20280;&#23637;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* search(T key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20280;&#23637;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* iterativeSearch(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#23567;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T minimum();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#22823;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T maximum();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26059;&#36716;key&#23545;&#24212;&#30340;&#33410;&#28857;&#20026;&#26681;&#33410;&#28857;&#65292;&#24182;&#36820;&#22238;&#20540;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void splay(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;&#20280;&#23637;&#26641;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20280;&#23637;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20280;&#23637;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print();
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder(SplayTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder(SplayTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#20280;&#23637;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder(SplayTreeNode&lt;T&gt;* tree) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20280;&#23637;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* search(SplayTreeNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#20280;&#23637;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* iterativeSearch(SplayTreeNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20280;&#23637;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* minimum(SplayTreeNode&lt;T&gt;* tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#20280;&#23637;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* maximum(SplayTreeNode&lt;T&gt;* tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26059;&#36716;key&#23545;&#24212;&#30340;&#33410;&#28857;&#20026;&#26681;&#33410;&#28857;&#65292;&#24182;&#36820;&#22238;&#20540;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* splay(SplayTreeNode&lt;T&gt;* tree, T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(z)&#25554;&#20837;&#21040;&#20280;&#23637;&#26641;(tree)&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* insert(SplayTreeNode&lt;T&gt;* &amp;tree, SplayTreeNode&lt;T&gt;* z);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#20280;&#23637;&#26641;(tree)&#20013;&#30340;&#32467;&#28857;(&#38190;&#20540;&#20026;key)&#65292;&#24182;&#36820;&#22238;&#34987;&#21024;&#38500;&#30340;&#32467;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt;* remove(SplayTreeNode&lt;T&gt;* &amp;tree, T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#20280;&#23637;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy(SplayTreeNode&lt;T&gt;* &amp;tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#20280;&#23637;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print(SplayTreeNode&lt;T&gt;* tree, T key, int direction);
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1573438201812" FOLDED="true" ID="ID_425691700" MODIFIED="1574760218283" TEXT="&#x51fd;&#x6570;&#x5b9e;&#x73b0;&#x4ee3;&#x7801;">
<node CREATED="1573438215052" ID="ID_505660120" MODIFIED="1573451913664" TEXT="&#x65cb;&#x8f6c;&#x4ee3;&#x7801;">
<node CREATED="1573438241292" ID="ID_830998751" MODIFIED="1573438266548">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#26059;&#36716;key&#23545;&#24212;&#30340;&#33410;&#28857;&#20026;&#26681;&#33410;&#28857;&#65292;&#24182;&#36820;&#22238;&#20540;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#27880;&#24847;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;(a)&#65306;&#20280;&#23637;&#26641;&#20013;&#23384;&#22312;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#23558;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;(b)&#65306;&#20280;&#23637;&#26641;&#20013;&#19981;&#23384;&#22312;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#65292;&#24182;&#19988;key &lt; tree-&gt;key&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;b-1 &quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21069;&#39537;&#33410;&#28857;&#23384;&#22312;&#30340;&#35805;&#65292;&#23558;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21069;&#39537;&#33410;&#28857;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;b-2 &quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21069;&#39537;&#33410;&#28857;&#19981;&#23384;&#22312;&#30340;&#35805;&#65292;&#21017;&#24847;&#21619;&#30528;&#65292;key&#27604;&#26641;&#20013;&#20219;&#20309;&#38190;&#20540;&#37117;&#23567;&#65292;&#37027;&#20040;&#27492;&#26102;&#65292;&#23558;&#26368;&#23567;&#33410;&#28857;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;(c)&#65306;&#20280;&#23637;&#26641;&#20013;&#19981;&#23384;&#22312;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#65292;&#24182;&#19988;key &gt; tree-&gt;key&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;c-1 &quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21518;&#32487;&#33410;&#28857;&#23384;&#22312;&#30340;&#35805;&#65292;&#23558;&quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21518;&#32487;&#33410;&#28857;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;c-2 &quot;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&quot;&#30340;&#21518;&#32487;&#33410;&#28857;&#19981;&#23384;&#22312;&#30340;&#35805;&#65292;&#21017;&#24847;&#21619;&#30528;&#65292;key&#27604;&#26641;&#20013;&#20219;&#20309;&#38190;&#20540;&#37117;&#22823;&#65292;&#37027;&#20040;&#27492;&#26102;&#65292;&#23558;&#26368;&#22823;&#33410;&#28857;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      SplayTreeNode&lt;T&gt;* SplayTree&lt;T&gt;::splay(SplayTreeNode&lt;T&gt;* tree, T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; N, *l, *r, *c;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;N.left = N.right = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;l = r = &amp;N;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;for (;;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &lt; tree-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tree-&gt;left == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &lt; tree-&gt;left-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = tree-&gt;left;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* rotate right */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;left = c-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;right = tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = c;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tree-&gt;left == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r-&gt;left = tree;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* link right */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r = tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if (key &gt; tree-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tree-&gt;right == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (key &gt; tree-&gt;right-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = tree-&gt;right;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* rotate left */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree-&gt;right = c-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c-&gt;left = tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = c;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (tree-&gt;right == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l-&gt;right = tree;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* link left */
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l = tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;l-&gt;right = tree-&gt;left;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* assemble */
    </p>
    <p>
      &#160;&#160;&#160;&#160;r-&gt;left = tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree-&gt;left = N.right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree-&gt;right = N.left;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void SplayTree&lt;T&gt;::splay(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;mRoot = splay(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573438891991" ID="ID_193410040" MODIFIED="1573438895190" TEXT="&#x63d2;&#x5165;&#x4ee3;&#x7801;">
<node CREATED="1573438896359" ID="ID_752825416" MODIFIED="1573438901262">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;&#25554;&#20837;&#21040;&#20280;&#23637;&#26641;&#20013;&#65292;&#24182;&#36820;&#22238;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20280;&#23637;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;key &#25554;&#20837;&#30340;&#32467;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      SplayTreeNode&lt;T&gt;* SplayTree&lt;T&gt;::insert(SplayTreeNode&lt;T&gt;* &amp;tree, SplayTreeNode&lt;T&gt;* z)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; *y = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; *x = tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26597;&#25214;z&#30340;&#25554;&#20837;&#20301;&#32622;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (z-&gt;key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else if (z-&gt;key &gt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cout &lt;&lt; &quot;&#19981;&#20801;&#35768;&#25554;&#20837;&#30456;&#21516;&#33410;&#28857;(&quot; &lt;&lt; z-&gt;key &lt;&lt; &quot;)!&quot; &lt;&lt; endl;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y==NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tree = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (z-&gt;key &lt; y-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;left = z;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;right = z;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void SplayTree&lt;T&gt;::insert(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; *z=NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&#26032;&#24314;&#32467;&#28857;&#22833;&#36133;&#65292;&#21017;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z=new SplayTreeNode&lt;T&gt;(key,NULL,NULL)) == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#25554;&#20837;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;mRoot = insert(mRoot, z);
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558;&#33410;&#28857;(key)&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;mRoot = splay(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1573438903007" ID="ID_913370111" MODIFIED="1573438930696">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21024;&#38500;&#33410;&#28857;&#20195;&#30721;
    </p>
  </body>
</html></richcontent>
<node CREATED="1573438931503" ID="ID_465997447" MODIFIED="1573438934527">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#21024;&#38500;&#32467;&#28857;(&#33410;&#28857;&#30340;&#38190;&#20540;&#20026;key)&#65292;&#36820;&#22238;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#20280;&#23637;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;key &#24453;&#21024;&#38500;&#32467;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;* &#36820;&#22238;&#20540;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      SplayTreeNode&lt;T&gt;* SplayTree&lt;T&gt;::remove(SplayTreeNode&lt;T&gt;* &amp;tree, T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;SplayTreeNode&lt;T&gt; *x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#26597;&#25214;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;&#65292;&#25214;&#19981;&#21040;&#30340;&#35805;&#30452;&#25509;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (search(tree, key) == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558;key&#23545;&#24212;&#30340;&#33410;&#28857;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;tree = splay(tree, key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (tree-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&quot;tree&#30340;&#21069;&#39537;&#33410;&#28857;&quot;&#26059;&#36716;&#20026;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = splay(tree-&gt;left, key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#31227;&#38500;tree&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;right = tree-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = tree-&gt;right;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;delete tree;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return x;
    </p>
    <p>
      
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void SplayTree&lt;T&gt;::remove(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;mRoot = remove(mRoot, key);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1574760239386" ID="ID_1066035713" MODIFIED="1574760246543" TEXT="&#x7ea2;&#x9ed1;&#x6811;">
<node CREATED="1574760257236" ID="ID_417989084" MODIFIED="1574760307398" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x7b80;&#x4ecb;">
<node CREATED="1574760262414" ID="ID_699612697" MODIFIED="1574760303145">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font color="#000000" size="3">&#32418;&#40657;&#26641;(Red-Black Tree&#65292;&#31616;&#31216;R-B Tree)&#65292;&#23427;&#19968;&#31181;&#29305;&#27530;&#30340;&#20108;&#21449;&#26597;&#25214;&#26641;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#32418;&#40657;&#26641;&#26159;&#29305;&#27530;&#30340;&#20108;&#21449;&#26597;&#25214;&#26641;&#65292;&#24847;&#21619;&#30528;&#23427;&#28385;&#36275;&#20108;&#21449;&#26597;&#25214;&#26641;&#30340;&#29305;&#24449;&#65306; </font>
    </p>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <font color="#000000" size="3">&#20219;&#24847;&#19968;&#20010;&#33410;&#28857;&#25152;&#21253;&#21547;&#30340;&#38190;&#20540;&#65292;&#22823;&#20110;&#31561;&#20110;&#24038;&#23401;&#23376;&#30340;&#38190;&#20540;&#65292;&#23567;&#20110;&#31561;&#20110;&#21491;&#23401;&#23376;&#30340;&#38190;&#20540;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#38500;&#20102;&#20855;&#22791;&#35813;&#29305;&#24615;&#20043;&#22806;&#65292;&#32418;&#40657;&#26641;&#36824;&#21253;&#25324;&#35768;&#22810;&#39069;&#22806;&#30340;&#20449;&#24687;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">&#32418;&#40657;&#26641;&#30340;&#27599;&#20010;&#33410;&#28857;&#19978;&#37117;&#26377;&#23384;&#20648;&#20301;&#34920;&#31034;&#33410;&#28857;&#30340;&#39068;&#33394;&#65292;&#39068;&#33394;&#26159;&#32418;(Red)&#25110;&#40657;(Black)</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574821005805" ID="ID_1825099867" MODIFIED="1574821011413" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x5e94;&#x7528;">
<node CREATED="1574821011872" ID="ID_434449633" MODIFIED="1574821018457" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x7684;&#x5e94;&#x7528;&#x6bd4;&#x8f83;&#x5e7f;&#x6cdb;&#xff0c;&#x4e3b;&#x8981;&#x662f;&#x7528;&#x5b83;&#x6765;&#x5b58;&#x50a8;&#x6709;&#x5e8f;&#x7684;&#x6570;&#x636e;&#xff0c;&#x5b83;&#x7684;&#x65f6;&#x95f4;&#x590d;&#x6742;&#x5ea6;&#x662f;O(lgn)&#xff0c;&#x6548;&#x7387;&#x975e;&#x5e38;&#x4e4b;&#x9ad8;&#x3002; &#x4f8b;&#x5982;&#xff0c;Java&#x96c6;&#x5408;&#x4e2d;&#x7684;TreeSet&#x548c;TreeMap&#xff0c;C++ STL&#x4e2d;&#x7684;set&#x3001;map&#xff0c;&#x4ee5;&#x53ca;Linux&#x865a;&#x62df;&#x5185;&#x5b58;&#x7684;&#x7ba1;&#x7406;&#xff0c;&#x90fd;&#x662f;&#x901a;&#x8fc7;&#x7ea2;&#x9ed1;&#x6811;&#x53bb;&#x5b9e;&#x73b0;&#x7684;&#x3002;"/>
</node>
<node CREATED="1574842685702" FOLDED="true" ID="ID_1261114161" MODIFIED="1575253287818" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x7684;&#x65f6;&#x95f4;&#x590d;&#x6742;&#x5ea6;&#x548c;&#x76f8;&#x5173;&#x8bc1;&#x660e;">
<node CREATED="1574842696369" ID="ID_489125459" MODIFIED="1574842719026">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <strong><font size="14px">&#32418;&#40657;&#26641;&#30340;&#26102;&#38388;&#22797;&#26434;&#24230;&#20026;: O(lgn)</font></strong><br /><font color="#000000" size="14px">&#19979;&#38754;&#36890;&#36807;&#8220;<em>&#25968;&#23398;&#24402;&#32435;&#27861;</em>&#8221;&#23545;&#32418;&#40657;&#26641;&#30340;&#26102;&#38388;&#22797;&#26434;&#24230;&#36827;&#34892;&#35777;&#26126;&#12290;</font>
    </p>
    <p>
      <font size="14px">&#23450;&#29702;&#65306;</font><strong><font color="#ff0000">&#19968;&#26869;&#21547;&#26377;n&#20010;&#33410;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#39640;&#24230;&#33267;&#22810;&#20026;2log(n+1)</font></strong><font size="14px">.</font>
    </p>
    <p>
      <font color="#000000" size="14px">&#35777;&#26126;&#65306;</font><br /><font color="#000000" size="14px">&#160;&#160;&#160;&#160;&quot;&#19968;&#26869;&#21547;&#26377;n&#20010;&#33410;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#39640;&#24230;&#33267;&#22810;&#20026;2log(n+1)&quot; &#30340;<strong>&#36870;&#21542;&#21629;&#39064;</strong>&#26159; &quot;&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#20869;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>h/2</sup>-1&#20010;&quot;&#12290;</font><br /><font color="#000000" size="14px">&#160; &#160;&#160;&#25105;&#20204;&#21482;&#38656;&#35201;&#35777;&#26126;&#36870;&#21542;&#21629;&#39064;&#65292;&#21363;&#21487;&#35777;&#26126;&#21407;&#21629;&#39064;&#20026;&#30495;&#65307;&#21363;&#21482;&#38656;&#35777;&#26126; </font><font color="#008000">&quot;&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#20869;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>h/2</sup>-1&#20010;&quot;</font><font color="#000000" size="14px">&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="14px">&#160;&#160;&#160;&#160;&#20174;&#26576;&#20010;&#33410;&#28857;x&#20986;&#21457;&#65288;&#19981;&#21253;&#25324;&#35813;&#33410;&#28857;&#65289;&#21040;&#36798;&#19968;&#20010;&#21494;&#33410;&#28857;&#30340;&#20219;&#24847;&#19968;&#26465;&#36335;&#24452;&#19978;&#65292;&#40657;&#33394;&#33410;&#28857;&#30340;&#20010;&#25968;&#31216;&#20026;&#35813;&#33410;&#28857;&#30340;&#40657;&#39640;&#24230;(x's black height)&#65292;&#35760;&#20026;<strong>bh(x)</strong>&#12290;&#20851;&#20110;bh(x)&#26377;&#20004;&#28857;&#38656;&#35201;&#35828;&#26126;&#65306;&#160;<br />&#160; &#160;&#160;&#31532;1&#28857;&#65306;&#26681;&#25454;&#32418;&#40657;&#26641;&#30340;&quot;<strong>&#29305;&#24615;(5)</strong>&#160; &#65292;&#21363;<em>&#20174;&#19968;&#20010;&#33410;&#28857;&#21040;&#35813;&#33410;&#28857;&#30340;&#23376;&#23385;&#33410;&#28857;&#30340;&#25152;&#26377;&#36335;&#24452;&#19978;&#21253;&#21547;&#30456;&#21516;&#25968;&#30446;&#30340;&#40657;&#33410;&#28857;</em>&quot;&#21487;&#30693;&#65292;&#20174;&#33410;&#28857;x&#20986;&#21457;&#21040;&#36798;&#30340;&#25152;&#26377;&#30340;&#21494;&#33410;&#28857;&#20855;&#26377;&#30456;&#21516;&#25968;&#30446;&#30340;&#40657;&#33410;&#28857;&#12290;<strong>&#36825;&#20063;&#23601;&#24847;&#21619;&#30528;&#65292;bh(x)&#30340;&#20540;&#26159;&#21807;&#19968;&#30340;</strong>&#65281;<br />&#160; &#160;&#160;&#31532;2&#28857;&#65306;&#26681;&#25454;&#32418;&#40657;&#33394;&#30340;&quot;&#29305;&#24615;(4)&#65292;&#21363;<em>&#22914;&#26524;&#19968;&#20010;&#33410;&#28857;&#26159;&#32418;&#33394;&#30340;&#65292;&#21017;&#23427;&#30340;&#23376;&#33410;&#28857;&#24517;&#39035;&#26159;&#40657;&#33394;&#30340;</em>&quot;&#21487;&#30693;&#65292;&#20174;&#33410;&#28857;x&#20986;&#21457;&#36798;&#21040;&#21494;&#33410;&#28857;&quot;&#25152;&#32463;&#21382;&#30340;&#40657;&#33410;&#28857;&#25968;&#30446;&quot;&gt;= &quot;&#25152;&#32463;&#21382;&#30340;&#32418;&#33410;&#28857;&#30340;&#25968;&#30446;&quot;&#12290;&#20551;&#35774;x&#26159;&#26681;&#33410;&#28857;&#65292;&#21017;&#21487;&#20197;&#24471;&#20986;&#32467;&#35770;&quot;<strong>bh(x) &gt;= h/2</strong>&quot;&#12290;&#36827;&#32780;&#65292;&#25105;&#20204;&#21482;&#38656;&#35777;&#26126; &quot;</font><font color="#008000">&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#40657;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>bh(x)</sup>-1&#20010;</font><font color="#000000" size="14px">&quot;&#21363;&#21487;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="14px">&#160;&#160;&#160;&#160;&#21040;&#36825;&#37324;&#65292;&#25105;&#20204;&#23558;&#38656;&#35201;&#35777;&#26126;&#30340;&#23450;&#29702;&#24050;&#32463;&#30001;</font><br /><strong><font color="#000000" size="3">&quot;</font><font color="#ff0000" size="3">&#19968;&#26869;&#21547;&#26377;n&#20010;&#33410;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#39640;&#24230;&#33267;&#22810;&#20026;2log(n+1)</font><font color="#000000" size="3">&quot;</font></strong><font color="#000000" size="3">&#160; </font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160;&#160;&#160;&#160;&#36716;&#21464;&#25104;&#21482;&#38656;&#35201;&#35777;&#26126;</font><font size="3"><br size="3" /></font><strong><font color="#000000" size="3">&quot;</font><font color="#ff0000" size="3">&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#20869;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>bh(x)</sup>-1&#20010;</font><font color="#000000" size="3">&quot;&#12290;</font></strong>
    </p>
    <p>
      <font size="3"><br size="3" />
      </font><font color="#000000" size="3">&#19979;&#38754;&#36890;&#36807;&quot;&#25968;&#23398;&#24402;&#32435;&#27861;&quot;&#24320;&#22987;&#35770;&#35777;&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#20869;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>bh(x)</sup>-1&#20010;&quot;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">(01) &#24403;&#26641;&#30340;&#39640;&#24230;h=0&#26102;&#65292;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#20869;&#33410;&#28857;&#20010;&#25968;&#26159;0&#65292;bh(x) &#20026;0&#65292;2<sup>bh(x)</sup>-1 &#20063;&#20026; 0&#12290;&#26174;&#28982;&#65292;&#21407;&#21629;&#39064;&#25104;&#31435;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">(02) &#24403;h&gt;0&#65292;&#19988;&#26641;&#30340;&#39640;&#24230;&#20026; h-1 &#26102;&#65292;&#23427;&#21253;&#21547;&#30340;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2<sup>bh(x)-1</sup>-1&#12290;&#36825;&#20010;&#26159;&#26681;&#25454;(01)&#25512;&#26029;&#20986;&#26469;&#30340;&#65281;</font>
    </p>
    <p>
      <font color="#000000" size="3">&#160;&#160;&#160;&#160;&#19979;&#38754;&#65292;&#30001;&#26641;&#30340;&#39640;&#24230;&#20026; h-1 &#30340;&#24050;&#30693;&#26465;&#20214;&#25512;&#20986;&#8220;&#26641;&#30340;&#39640;&#24230;&#20026; h &#26102;&#65292;&#23427;&#25152;&#21253;&#21547;&#30340;&#33410;&#28857;&#26641;&#20026; 2<sup>bh(x)</sup>-1&#8221;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">&#160;&#160;&#160;&#160;&#24403;&#26641;&#30340;&#39640;&#24230;&#20026; h &#26102;&#65292;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#23545;&#20110;&#33410;&#28857;x(x&#20026;&#26681;&#33410;&#28857;)&#65292;&#20854;&#40657;&#39640;&#24230;&#20026;bh(x)&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#23545;&#20110;&#33410;&#28857;x&#30340;&#24038;&#21491;&#23376;&#26641;&#65292;&#23427;&#20204;&#40657;&#39640;&#24230;&#20026; bh(x) &#25110;&#32773; bh(x)-1&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#26681;&#25454;(02)&#30340;&#24050;&#30693;&#26465;&#20214;&#65292;&#25105;&#20204;&#24050;&#30693; &quot;x&#30340;&#24038;&#21491;&#23376;&#26641;&#65292;&#21363;&#39640;&#24230;&#20026; h-1 &#30340;&#33410;&#28857;&#65292;&#23427;&#21253;&#21547;&#30340;&#33410;&#28857;&#33267;&#23569;&#20026; 2<sup>bh(x)-1</sup>-1 &#20010;&quot;&#65307;</font>
    </p>
    <p>
      <font color="#000000" size="3">&#160;&#160;&#160;&#160;&#25152;&#20197;&#65292;&#33410;&#28857;x&#25152;&#21253;&#21547;&#30340;&#33410;&#28857;&#33267;&#23569;&#20026; ( 2<sup>bh(x)-1</sup>-1 ) + ( 2<sup>bh(x)-1</sup>-1 ) + 1 = 2^<sup>bh(x)</sup>-1&#12290;&#21363;&#33410;&#28857;x&#25152;&#21253;&#21547;&#30340;&#33410;&#28857;&#33267;&#23569;&#20026; 2<sup>bh(x)</sup>-1&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#22240;&#27492;&#65292;&#21407;&#21629;&#39064;&#25104;&#31435;&#12290;</font>
    </p>
    <p>
      <font color="#000000" size="3">&#160;&#160;&#160;&#160;&#30001;(01)&#12289;(02)&#24471;&#20986;&#65292;&quot;&#39640;&#24230;&#20026;h&#30340;&#32418;&#40657;&#26641;&#65292;&#23427;&#30340;&#21253;&#21547;&#30340;&#20869;&#33410;&#28857;&#20010;&#25968;&#33267;&#23569;&#20026; 2^<sup>bh(x)</sup>-1&#20010;&quot;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160; &#160;&#160;&#22240;&#27492;&#65292;&#8220;&#19968;&#26869;&#21547;&#26377;n&#20010;&#33410;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#39640;&#24230;&#33267;&#22810;&#20026;2log(n+1)&#8221;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574760307870" ID="ID_627545522" MODIFIED="1574760318557" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x7279;&#x6027;">
<node CREATED="1574760320414" ID="ID_333912894" MODIFIED="1574842705584">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      (1) &#27599;&#20010;&#33410;&#28857;&#25110;&#32773;&#26159;&#40657;&#33394;&#65292;&#25110;&#32773;&#26159;&#32418;&#33394;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1574760327597" ID="ID_968989231" MODIFIED="1574760332896" TEXT="(2) &#x6839;&#x8282;&#x70b9;&#x662f;&#x9ed1;&#x8272;&#x3002;"/>
<node CREATED="1574760333782" ID="ID_373555119" MODIFIED="1574760339557" TEXT="(3) &#x6bcf;&#x4e2a;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#x662f;&#x9ed1;&#x8272;&#x3002; [&#x6ce8;&#x610f;&#xff1a;&#x8fd9;&#x91cc;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#xff0c;&#x662f;&#x6307;&#x4e3a;&#x7a7a;&#x7684;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#xff01;]"/>
<node CREATED="1574760343918" ID="ID_1534687174" MODIFIED="1574760350190" TEXT="(4) &#x5982;&#x679c;&#x4e00;&#x4e2a;&#x8282;&#x70b9;&#x662f;&#x7ea2;&#x8272;&#x7684;&#xff0c;&#x5219;&#x5b83;&#x7684;&#x5b50;&#x8282;&#x70b9;&#x5fc5;&#x987b;&#x662f;&#x9ed1;&#x8272;&#x7684;&#x3002;"/>
<node CREATED="1574760368382" ID="ID_1413989261" MODIFIED="1574760382589" TEXT="(5) &#x4ece;&#x4e00;&#x4e2a;&#x8282;&#x70b9;&#x5230;&#x8be5;&#x8282;&#x70b9;&#x7684;&#x5b50;&#x5b59;&#x8282;&#x70b9;&#x7684;&#x6240;&#x6709;&#x8def;&#x5f84;&#x4e0a;&#x5305;&#x542b;&#x76f8;&#x540c;&#x6570;&#x76ee;&#x7684;&#x9ed1;&#x8282;&#x70b9;&#x3002;"/>
<node CREATED="1574760492661" ID="ID_258722493" MODIFIED="1574760495235" TEXT="&#x6ce8;&#x610f;&#x70b9;">
<node CREATED="1574760495748" ID="ID_1108158954" MODIFIED="1574760503149" TEXT="&#x7b2c;&#x4e00;&#xff0c;&#x7279;&#x6027;(3)&#x4e2d;&#x7684;&#x53f6;&#x5b50;&#x8282;&#x70b9;&#xff0c;&#x662f;&#x53ea;&#x4e3a;&#x7a7a;(NIL&#x6216;null)&#x7684;&#x8282;&#x70b9;&#x3002;"/>
<node CREATED="1574760504245" ID="ID_441075858" MODIFIED="1574760509101" TEXT="&#x7b2c;&#x4e8c;&#xff0c;&#x7279;&#x6027;(5)&#xff0c;&#x786e;&#x4fdd;&#x6ca1;&#x6709;&#x4e00;&#x6761;&#x8def;&#x5f84;&#x4f1a;&#x6bd4;&#x5176;&#x4ed6;&#x8def;&#x5f84;&#x957f;&#x51fa;&#x4fe9;&#x500d;&#x3002;&#x56e0;&#x800c;&#xff0c;&#x7ea2;&#x9ed1;&#x6811;&#x662f;&#x76f8;&#x5bf9;&#x662f;&#x63a5;&#x8fd1;&#x5e73;&#x8861;&#x7684;&#x4e8c;&#x53c9;&#x6811;&#x3002;"/>
</node>
</node>
<node CREATED="1574760512332" ID="ID_449781498" MODIFIED="1574760518245" TEXT="&#x7ea2;&#x9ed1;&#x6811;&#x7684;C++&#x5b9e;&#x73b0;(&#x4ee3;&#x7801;&#x8bf4;&#x660e;)">
<node CREATED="1574760555628" ID="ID_1231274950" MODIFIED="1574760557827" TEXT="&#x8bf4;&#x660e;">
<node CREATED="1574760561292" ID="ID_1022525643" MODIFIED="1574760591813">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#32418;&#40657;&#26641;&#30340;&#22522;&#26412;&#25805;&#20316;&#26159;<strong>&#28155;&#21152;</strong>&#12289;<strong>&#21024;&#38500;</strong>&#21644;<strong>&#26059;&#36716;</strong>&#12290;&#22312;&#23545;&#32418;&#40657;&#26641;&#36827;&#34892;&#28155;&#21152;&#25110;&#21024;&#38500;&#21518;&#65292;&#20250;&#29992;&#21040;&#26059;&#36716;&#26041;&#27861;&#12290;&#20026;&#20160;&#20040;&#21602;&#65311;&#36947;&#29702;&#24456;&#31616;&#21333;&#65292;&#28155;&#21152;&#25110;&#21024;&#38500;&#32418;&#40657;&#26641;&#20013;&#30340;&#33410;&#28857;&#20043;&#21518;&#65292;&#32418;&#40657;&#26641;&#23601;&#21457;&#29983;&#20102;&#21464;&#21270;&#65292;&#21487;&#33021;&#19981;&#28385;&#36275;&#32418;&#40657;&#26641;&#30340;5&#26465;&#24615;&#36136;&#65292;&#20063;&#23601;&#19981;&#20877;&#26159;&#19968;&#39063;&#32418;&#40657;&#26641;&#20102;&#65292;&#32780;&#26159;&#19968;&#39063;&#26222;&#36890;&#30340;&#26641;&#12290;&#32780;&#36890;&#36807;&#26059;&#36716;&#65292;&#21487;&#20197;&#20351;&#36825;&#39063;&#26641;&#37325;&#26032;&#25104;&#20026;&#32418;&#40657;&#26641;&#12290;&#31616;&#21333;&#28857;&#35828;&#65292;&#26059;&#36716;&#30340;&#30446;&#30340;&#26159;&#35753;&#26641;&#20445;&#25345;&#32418;&#40657;&#26641;&#30340;&#29305;&#24615;&#12290;</font>
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574760610468" FOLDED="true" ID="ID_1255070948" MODIFIED="1574842846011" TEXT="1. &#x57fa;&#x672c;&#x5b9a;&#x4e49;">
<node CREATED="1574760627700" ID="ID_226552965" MODIFIED="1574842423279" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1574760630028" ID="ID_1915561821" MODIFIED="1574760645631">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      enum RBTColor{RED, BLACK};
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class RBTNode{
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTColor color;&#160;&#160;&#160;&#160;// &#39068;&#33394;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T key;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20851;&#38190;&#23383;(&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode *left;&#160;&#160;&#160;&#160;// &#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode *right;&#160;&#160;&#160;&#160;// &#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode *parent; // &#29238;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode(T value, RBTColor c, RBTNode *p, RBTNode *l, RBTNode *r):
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key(value),color(c),parent(),left(l),right(r) {}
    </p>
    <p>
      };
    </p>
    <p>
      
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      class RBTree {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *mRoot;&#160;&#160;&#160;&#160;// &#26681;&#32467;&#28857;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;public:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTree();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;~RBTree();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#32418;&#40657;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* search(T key);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#32418;&#40657;&#26641;&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* iterativeSearch(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#23567;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T minimum();
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;&#26368;&#22823;&#32467;&#28857;&#30340;&#38190;&#20540;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T maximum();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21518;&#32487;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#32418;&#40657;&#26641;&#20013;&#25968;&#25454;&#20540;&#22823;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#23567;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* successor(RBTNode&lt;T&gt; *x);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25214;&#32467;&#28857;(x)&#30340;&#21069;&#39537;&#32467;&#28857;&#12290;&#21363;&#65292;&#26597;&#25214;&quot;&#32418;&#40657;&#26641;&#20013;&#25968;&#25454;&#20540;&#23567;&#20110;&#35813;&#32467;&#28857;&quot;&#30340;&quot;&#26368;&#22823;&#32467;&#28857;&quot;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* predecessor(RBTNode&lt;T&gt; *x);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;&#32418;&#40657;&#26641;&#20013;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(T key);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#32418;&#40657;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy();
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#32418;&#40657;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print();
    </p>
    <p>
      &#160;&#160;&#160;&#160;private:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21069;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void preOrder(RBTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#20013;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void inOrder(RBTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21518;&#24207;&#36941;&#21382;&quot;&#32418;&#40657;&#26641;&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void postOrder(RBTNode&lt;T&gt;* tree) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#32418;&#40657;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* search(RBTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// (&#38750;&#36882;&#24402;&#23454;&#29616;)&#26597;&#25214;&quot;&#32418;&#40657;&#26641;x&quot;&#20013;&#38190;&#20540;&#20026;key&#30340;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* iterativeSearch(RBTNode&lt;T&gt;* x, T key) const;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#23567;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#26368;&#23567;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* minimum(RBTNode&lt;T&gt;* tree);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#26597;&#25214;&#26368;&#22823;&#32467;&#28857;&#65306;&#36820;&#22238;tree&#20026;&#26681;&#32467;&#28857;&#30340;&#32418;&#40657;&#26641;&#30340;&#26368;&#22823;&#32467;&#28857;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt;* maximum(RBTNode&lt;T&gt;* tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#24038;&#26059;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void leftRotate(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* x);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21491;&#26059;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void rightRotate(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* y);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25554;&#20837;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insert(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* node);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25554;&#20837;&#20462;&#27491;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void insertFixUp(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* node);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void remove(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt; *node);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#21024;&#38500;&#20462;&#27491;&#20989;&#25968;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void removeFixUp(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt; *node, RBTNode&lt;T&gt; *parent);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38144;&#27585;&#32418;&#40657;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void destroy(RBTNode&lt;T&gt;* &amp;tree);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#25171;&#21360;&#32418;&#40657;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;void print(RBTNode&lt;T&gt;* tree, T key, int direction);
    </p>
    <p>
      
    </p>
    <p>
      #define rb_parent(r)&#160;&#160;&#160;((r)-&gt;parent)
    </p>
    <p>
      #define rb_color(r) ((r)-&gt;color)
    </p>
    <p>
      #define rb_is_red(r)&#160;&#160;&#160;((r)-&gt;color==RED)
    </p>
    <p>
      #define rb_is_black(r)&#160;&#160;((r)-&gt;color==BLACK)
    </p>
    <p>
      #define rb_set_black(r)&#160;&#160;do { (r)-&gt;color = BLACK; } while (0)
    </p>
    <p>
      #define rb_set_red(r)&#160;&#160;do { (r)-&gt;color = RED; } while (0)
    </p>
    <p>
      #define rb_set_parent(r,p)&#160;&#160;do { (r)-&gt;parent = (p); } while (0)
    </p>
    <p>
      #define rb_set_color(r,c)&#160;&#160;do { (r)-&gt;color = (c); } while (0)
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1574760631499" ID="ID_214774806" MODIFIED="1574760842805">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p content="text/html; charset=utf-8" http-equiv="content-type">
      <span style="font-size: 14px; color: #000000"><font color="#000000" size="3">RBTNode&#26159;&#32418;&#40657;&#26641;&#30340;&#33410;&#28857;&#31867;&#65292;&#32780;RBTree&#23545;&#24212;&#26159;&#32418;&#40657;&#26641;&#30340;&#25805;&#20316;&#23454;&#29616;&#31867;&#12290;&#22312;RBTree&#20013;&#21253;&#21547;&#20102;&#26681;&#33410;&#28857;mRoot&#21644;&#32418;&#40657;&#26641;&#30340;&#30456;&#20851;API&#12290;</font></span><font size="3"><br size="3" /></font><span style="font-size: 14px; color: #ff0000"><font color="#ff0000" size="3">&#27880;&#24847;&#65306;(01) &#22312;&#23454;&#29616;&#32418;&#40657;&#26641;API&#30340;&#36807;&#31243;&#20013;&#65292;&#25105;&#37325;&#36733;&#20102;&#35768;&#22810;&#20989;&#25968;&#12290;&#37325;&#36733;&#30340;&#21407;&#22240;&#65292;&#19968;&#26159;&#22240;&#20026;&#26377;&#30340;API&#26159;&#20869;&#37096;&#25509;&#21475;&#65292;&#26377;&#30340;&#26159;&#22806;&#37096;&#25509;&#21475;&#65307;&#20108;&#26159;&#20026;&#20102;&#35753;&#32467;&#26500;&#26356;&#21152;&#28165;&#26224;&#12290;</font></span><font size="3"><br size="3" /></font><span style="font-size: 14px; color: #ff0000"><font color="#ff0000" size="3">&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(02) &#30001;&#20110;C++&#30340;&#23454;&#29616;&#26159;&#22312;&#19978;&#19968;&#31687;&#20171;&#32461;&#30340;&quot;C&#35821;&#35328;&quot;&#23454;&#29616;&#22522;&#30784;&#19978;&#31227;&#26893;&#32780;&#26469;&#65292;&#22312;&#35813;&#20195;&#30721;&#20013;&#65292;&#20445;&#30041;&#20102;&#19968;&#20123;C&#35821;&#35328;&#30340;&#29305;&#24615;&#65307;&#20363;&#22914;(&#23439;&#23450;&#20041;)&#12290;</font></span>
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1574760851106" FOLDED="true" ID="ID_273512001" MODIFIED="1574842842844" TEXT="2.&#x5de6;&#x65cb;">
<node CREATED="1574760864274" FOLDED="true" ID="ID_1560377019" MODIFIED="1574840214871" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1574762014930" ID="ID_1258771214" MODIFIED="1574762968821">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23545;&#32418;&#40657;&#26641;&#30340;&#33410;&#28857;(x)&#36827;&#34892;&#24038;&#26059;&#36716;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#24038;&#26059;&#31034;&#24847;&#22270;(&#23545;&#33410;&#28857;x&#36827;&#34892;&#24038;&#26059;)&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;px&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;px
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;/&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;x&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;/&#160;&#160;\&#160;&#160;&#160;&#160;&#160;&#160;--(&#24038;&#26059;)--&gt;&#160;&#160;&#160;&#160;/ \&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#
    </p>
    <p>
      &#160;*&#160;&#160;lx&#160;&#160;&#160;y&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x&#160;&#160;ry&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;/&#160;&#160;&#160;\&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/&#160;&#160;\
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;ly&#160;&#160;&#160;ry&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lx&#160;&#160;ly&#160;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void RBTree&lt;T&gt;::leftRotate(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* x)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;x&#30340;&#21491;&#23401;&#23376;&#20026;y
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *y = x-&gt;right;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;y&#30340;&#24038;&#23401;&#23376;&#8221; &#35774;&#20026; &#8220;x&#30340;&#21491;&#23401;&#23376;&#8221;&#65307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;y&#30340;&#24038;&#23401;&#23376;&#38750;&#31354;&#65292;&#23558; &#8220;x&#8221; &#35774;&#20026; &#8220;y&#30340;&#24038;&#23401;&#23376;&#30340;&#29238;&#20146;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;x-&gt;right = y-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;left != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;left-&gt;parent = x;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;x&#30340;&#29238;&#20146;&#8221; &#35774;&#20026; &#8220;y&#30340;&#29238;&#20146;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;y-&gt;parent = x-&gt;parent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;parent == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = y;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22914;&#26524; &#8220;x&#30340;&#29238;&#20146;&#8221; &#26159;&#31354;&#33410;&#28857;&#65292;&#21017;&#23558;y&#35774;&#20026;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (x-&gt;parent-&gt;left == x)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;parent-&gt;left = y;&#160;&#160;&#160;&#160;// &#22914;&#26524; x&#26159;&#23427;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#65292;&#21017;&#23558;y&#35774;&#20026;&#8220;x&#30340;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;parent-&gt;right = y;&#160;&#160;&#160;&#160;// &#22914;&#26524; x&#26159;&#23427;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#65292;&#21017;&#23558;y&#35774;&#20026;&#8220;x&#30340;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;x&#8221; &#35774;&#20026; &#8220;y&#30340;&#24038;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;y-&gt;left = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;x&#30340;&#29238;&#33410;&#28857;&#8221; &#35774;&#20026; &#8220;y&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;x-&gt;parent = y;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574842826688" ID="ID_1142782700" MODIFIED="1574842827759" TEXT="&#x5de6;&#x65cb;&#x4e2d;&#x7684;&#x201c;&#x5de6;&#x201d;&#xff0c;&#x610f;&#x5473;&#x7740;&#x201c;&#x88ab;&#x65cb;&#x8f6c;&#x7684;&#x8282;&#x70b9;&#x5c06;&#x53d8;&#x6210;&#x4e00;&#x4e2a;&#x5de6;&#x8282;&#x70b9;&#x201d;&#x3002;"/>
</node>
<node CREATED="1574762026922" FOLDED="true" ID="ID_1528374318" MODIFIED="1574842844180" TEXT="3.&#x53f3;&#x65cb;">
<node CREATED="1574762037402" FOLDED="true" ID="ID_1443199334" MODIFIED="1574842422263" TEXT="&#x4ee3;&#x7801;">
<node CREATED="1574762039962" ID="ID_743236426" MODIFIED="1574762981204">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23545;&#32418;&#40657;&#26641;&#30340;&#33410;&#28857;(y)&#36827;&#34892;&#21491;&#26059;&#36716;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21491;&#26059;&#31034;&#24847;&#22270;(&#23545;&#33410;&#28857;y&#36827;&#34892;&#24038;&#26059;)&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;py&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;py
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/&#160;&#160;\&#160;&#160;&#160;&#160;&#160;&#160;--(&#21491;&#26059;)--&gt;&#160;&#160;&#160;&#160;&#160;&#160;/&#160;&#160;\&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x&#160;&#160;&#160;ry&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lx&#160;&#160;&#160;y&#160;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;&#160;/ \&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/ \&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;&#160;lx&#160;&#160;rx&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rx&#160;&#160;ry
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void RBTree&lt;T&gt;::rightRotate(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* y)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#35774;&#32622;x&#26159;&#24403;&#21069;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *x = y-&gt;left;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;x&#30340;&#21491;&#23401;&#23376;&#8221; &#35774;&#20026; &#8220;y&#30340;&#24038;&#23401;&#23376;&#8221;&#65307;
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&quot;x&#30340;&#21491;&#23401;&#23376;&quot;&#19981;&#20026;&#31354;&#30340;&#35805;&#65292;&#23558; &#8220;y&#8221; &#35774;&#20026; &#8220;x&#30340;&#21491;&#23401;&#23376;&#30340;&#29238;&#20146;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;y-&gt;left = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (x-&gt;right != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x-&gt;right-&gt;parent = y;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;y&#30340;&#29238;&#20146;&#8221; &#35774;&#20026; &#8220;x&#30340;&#29238;&#20146;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;x-&gt;parent = y-&gt;parent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y-&gt;parent == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = x;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#22914;&#26524; &#8220;y&#30340;&#29238;&#20146;&#8221; &#26159;&#31354;&#33410;&#28857;&#65292;&#21017;&#23558;x&#35774;&#20026;&#26681;&#33410;&#28857;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (y == y-&gt;parent-&gt;right)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;right = x;&#160;&#160;&#160;&#160;// &#22914;&#26524; y&#26159;&#23427;&#29238;&#33410;&#28857;&#30340;&#21491;&#23401;&#23376;&#65292;&#21017;&#23558;x&#35774;&#20026;&#8220;y&#30340;&#29238;&#33410;&#28857;&#30340;&#21491;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;parent-&gt;left = x;&#160;&#160;&#160;&#160;// (y&#26159;&#23427;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;) &#23558;x&#35774;&#20026;&#8220;x&#30340;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;y&#8221; &#35774;&#20026; &#8220;x&#30340;&#21491;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;x-&gt;right = y;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558; &#8220;y&#30340;&#29238;&#33410;&#28857;&#8221; &#35774;&#20026; &#8220;x&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;y-&gt;parent = x;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574842830776" ID="ID_312363961" MODIFIED="1574842837195" TEXT="&#x53f3;&#x65cb;&#x4e2d;&#x7684;&#x201c;&#x53f3;&#x201d;&#xff0c;&#x610f;&#x5473;&#x7740;&#x201c;&#x88ab;&#x65cb;&#x8f6c;&#x7684;&#x8282;&#x70b9;&#x5c06;&#x53d8;&#x6210;&#x4e00;&#x4e2a;&#x53f3;&#x8282;&#x70b9;&#x201d;&#x3002;"/>
</node>
<node CREATED="1574762052418" FOLDED="true" ID="ID_523218581" MODIFIED="1575253398099" TEXT="4.&#x6dfb;&#x52a0;">
<node CREATED="1574840298003" ID="ID_743938155" MODIFIED="1574842324321" TEXT="&#x6dfb;&#x52a0;&#x4ee3;&#x7801;">
<node CREATED="1574840300923" ID="ID_1901660198" MODIFIED="1574840306143">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;&#25554;&#20837;&#21040;&#32418;&#40657;&#26641;&#20013;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;root &#32418;&#40657;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;node &#25554;&#20837;&#30340;&#32467;&#28857;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23545;&#24212;&#12298;&#31639;&#27861;&#23548;&#35770;&#12299;&#20013;&#30340;node
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void RBTree&lt;T&gt;::insert(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* node)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *y = NULL;
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *x = root;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// 1. &#23558;&#32418;&#40657;&#26641;&#24403;&#20316;&#19968;&#39063;&#20108;&#21449;&#26597;&#25214;&#26641;&#65292;&#23558;&#33410;&#28857;&#28155;&#21152;&#21040;&#20108;&#21449;&#26597;&#25214;&#26641;&#20013;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (x != NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y = x;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (node-&gt;key &lt; x-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = x-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;node-&gt;parent = y;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (y!=NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (node-&gt;key &lt; y-&gt;key)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;left = node;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y-&gt;right = node;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = node;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// 2. &#35774;&#32622;&#33410;&#28857;&#30340;&#39068;&#33394;&#20026;&#32418;&#33394;
    </p>
    <p>
      &#160;&#160;&#160;&#160;node-&gt;color = RED;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// 3. &#23558;&#23427;&#37325;&#26032;&#20462;&#27491;&#20026;&#19968;&#39063;&#20108;&#21449;&#26597;&#25214;&#26641;
    </p>
    <p>
      &#160;&#160;&#160;&#160;insertFixUp(root, node);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      /*
    </p>
    <p>
      &#160;* &#23558;&#32467;&#28857;(key&#20026;&#33410;&#28857;&#38190;&#20540;)&#25554;&#20837;&#21040;&#32418;&#40657;&#26641;&#20013;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;tree &#32418;&#40657;&#26641;&#30340;&#26681;&#32467;&#28857;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;key &#25554;&#20837;&#32467;&#28857;&#30340;&#38190;&#20540;
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void RBTree&lt;T&gt;::insert(T key)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *z=NULL;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#22914;&#26524;&#26032;&#24314;&#32467;&#28857;&#22833;&#36133;&#65292;&#21017;&#36820;&#22238;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if ((z=new RBTNode&lt;T&gt;(key,BLACK,NULL,NULL,NULL)) == NULL)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;insert(mRoot, z);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574842294957" ID="ID_720040708" MODIFIED="1574842317516" TEXT="&#x6dfb;&#x52a0;&#x4fee;&#x6b63;&#x4ee3;&#x7801;">
<node CREATED="1574842328324" ID="ID_1928971092" MODIFIED="1574842332595">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      /*
    </p>
    <p>
      &#160;* &#32418;&#40657;&#26641;&#25554;&#20837;&#20462;&#27491;&#20989;&#25968;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#22312;&#21521;&#32418;&#40657;&#26641;&#20013;&#25554;&#20837;&#33410;&#28857;&#20043;&#21518;(&#22833;&#21435;&#24179;&#34913;)&#65292;&#20877;&#35843;&#29992;&#35813;&#20989;&#25968;&#65307;
    </p>
    <p>
      &#160;* &#30446;&#30340;&#26159;&#23558;&#23427;&#37325;&#26032;&#22609;&#36896;&#25104;&#19968;&#39063;&#32418;&#40657;&#26641;&#12290;
    </p>
    <p>
      &#160;*
    </p>
    <p>
      &#160;* &#21442;&#25968;&#35828;&#26126;&#65306;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;root &#32418;&#40657;&#26641;&#30340;&#26681;
    </p>
    <p>
      &#160;*&#160;&#160;&#160;&#160;&#160;node &#25554;&#20837;&#30340;&#32467;&#28857;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#23545;&#24212;&#12298;&#31639;&#27861;&#23548;&#35770;&#12299;&#20013;&#30340;z
    </p>
    <p>
      &#160;*/
    </p>
    <p>
      template &lt;class T&gt;
    </p>
    <p>
      void RBTree&lt;T&gt;::insertFixUp(RBTNode&lt;T&gt;* &amp;root, RBTNode&lt;T&gt;* node)
    </p>
    <p>
      {
    </p>
    <p>
      &#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *parent, *gparent;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#33509;&#8220;&#29238;&#33410;&#28857;&#23384;&#22312;&#65292;&#24182;&#19988;&#29238;&#33410;&#28857;&#30340;&#39068;&#33394;&#26159;&#32418;&#33394;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;while ((parent = rb_parent(node)) &amp;&amp; rb_is_red(parent))
    </p>
    <p>
      &#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gparent = rb_parent(parent);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#33509;&#8220;&#29238;&#33410;&#28857;&#8221;&#26159;&#8220;&#31062;&#29238;&#33410;&#28857;&#30340;&#24038;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (parent == gparent-&gt;left)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 1&#26465;&#20214;&#65306;&#21460;&#21460;&#33410;&#28857;&#26159;&#32418;&#33394;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *uncle = gparent-&gt;right;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (uncle &amp;&amp; rb_is_red(uncle))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(uncle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_red(gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = gparent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 2&#26465;&#20214;&#65306;&#21460;&#21460;&#26159;&#40657;&#33394;&#65292;&#19988;&#24403;&#21069;&#33410;&#28857;&#26159;&#21491;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (parent-&gt;right == node)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *tmp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;leftRotate(root, parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;parent = node;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = tmp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 3&#26465;&#20214;&#65306;&#21460;&#21460;&#26159;&#40657;&#33394;&#65292;&#19988;&#24403;&#21069;&#33410;&#28857;&#26159;&#24038;&#23401;&#23376;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_red(gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rightRotate(root, gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else//&#33509;&#8220;z&#30340;&#29238;&#33410;&#28857;&#8221;&#26159;&#8220;z&#30340;&#31062;&#29238;&#33410;&#28857;&#30340;&#21491;&#23401;&#23376;&#8221;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 1&#26465;&#20214;&#65306;&#21460;&#21460;&#33410;&#28857;&#26159;&#32418;&#33394;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *uncle = gparent-&gt;left;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (uncle &amp;&amp; rb_is_red(uncle))
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(uncle);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_red(gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = gparent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 2&#26465;&#20214;&#65306;&#21460;&#21460;&#26159;&#40657;&#33394;&#65292;&#19988;&#24403;&#21069;&#33410;&#28857;&#26159;&#24038;&#23401;&#23376;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (parent-&gt;left == node)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RBTNode&lt;T&gt; *tmp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rightRotate(root, parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp = parent;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;parent = node;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;node = tmp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Case 3&#26465;&#20214;&#65306;&#21460;&#21460;&#26159;&#40657;&#33394;&#65292;&#19988;&#24403;&#21069;&#33410;&#28857;&#26159;&#21491;&#23401;&#23376;&#12290;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_black(parent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rb_set_red(gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;leftRotate(root, gparent);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// &#23558;&#26681;&#33410;&#28857;&#35774;&#20026;&#40657;&#33394;
    </p>
    <p>
      &#160;&#160;&#160;&#160;rb_set_black(root);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1575253322608" FOLDED="true" ID="ID_858268123" MODIFIED="1575253394841" TEXT="&#x6dfb;&#x52a0;&#x7684;&#x6982;&#x5ff5;">
<node CREATED="1575253359397" ID="ID_735692664" MODIFIED="1575253385279">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <img src="../Pictures/选区_038.png" />
  </body>
</html>
</richcontent>
</node>
</node>
</node>
<node CREATED="1575253400301" ID="ID_1760328014" MODIFIED="1575253403083" TEXT="5.&#x5220;&#x9664;">
<node CREATED="1575253403725" FOLDED="true" ID="ID_388651930" MODIFIED="1575253525969" TEXT="&#x8be6;&#x7ec6;&#x63cf;&#x8ff0;">
<node CREATED="1575253447221" ID="ID_118913864" MODIFIED="1575253452486" TEXT="&#x7b2c;&#x4e00;&#x6b65;&#xff1a;&#x5c06;&#x7ea2;&#x9ed1;&#x6811;&#x5f53;&#x4f5c;&#x4e00;&#x9897;&#x4e8c;&#x53c9;&#x67e5;&#x627e;&#x6811;&#xff0c;&#x5c06;&#x8282;&#x70b9;&#x5220;&#x9664;&#x3002;">
<node CREATED="1575253462501" ID="ID_243189811" MODIFIED="1575253512051">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      <font size="3" color="#000000">&#160;&#36825;&#21644;&quot;&#21024;&#38500;&#24120;&#35268;&#20108;&#21449;&#26597;&#25214;&#26641;&#20013;&#21024;&#38500;&#33410;&#28857;&#30340;&#26041;&#27861;&#26159;&#19968;&#26679;&#30340;&quot;&#12290;&#20998;3&#31181;&#24773;&#20917;&#65306;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160;&#9312; &#34987;&#21024;&#38500;&#33410;&#28857;&#27809;&#26377;&#20799;&#23376;&#65292;&#21363;&#20026;&#21494;&#33410;&#28857;&#12290;&#37027;&#20040;&#65292;&#30452;&#25509;&#23558;&#35813;&#33410;&#28857;&#21024;&#38500;&#23601;OK&#20102;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160;&#9313; &#34987;&#21024;&#38500;&#33410;&#28857;&#21482;&#26377;&#19968;&#20010;&#20799;&#23376;&#12290;&#37027;&#20040;&#65292;&#30452;&#25509;&#21024;&#38500;&#35813;&#33410;&#28857;&#65292;&#24182;&#29992;&#35813;&#33410;&#28857;&#30340;&#21807;&#19968;&#23376;&#33410;&#28857;&#39030;&#26367;&#23427;&#30340;&#20301;&#32622;&#12290;</font><font size="3"><br size="3" /></font><font color="#000000" size="3">&#160;&#9314; &#34987;&#21024;&#38500;&#33410;&#28857;&#26377;&#20004;&#20010;&#20799;&#23376;&#12290;&#37027;&#20040;&#65292;&#20808;&#25214;&#20986;&#23427;&#30340;&#21518;&#32487;&#33410;&#28857;&#65307;&#28982;&#21518;&#25226;&#8220;&#23427;&#30340;&#21518;&#32487;&#33410;&#28857;&#30340;&#20869;&#23481;&#8221;&#22797;&#21046;&#32473;&#8220;&#35813;&#33410;&#28857;&#30340;&#20869;&#23481;&#8221;&#65307;&#20043;&#21518;&#65292;&#21024;&#38500;&#8220;&#23427;&#30340;&#21518;&#32487;&#33410;&#28857;&#8221;&#12290;&#22312;&#36825;&#37324;&#65292;&#21518;&#32487;&#33410;&#28857;&#30456;&#24403;&#20110;&#26367;&#36523;&#65292;&#22312;&#23558;&#21518;&#32487;&#33410;&#28857;&#30340;&#20869;&#23481;&#22797;&#21046;&#32473;&quot;&#34987;&#21024;&#38500;&#33410;&#28857;&quot;&#20043;&#21518;&#65292;&#20877;&#23558;&#21518;&#32487;&#33410;&#28857;&#21024;&#38500;&#12290;&#36825;&#26679;&#23601;&#24039;&#22937;&#30340;&#23558;&#38382;&#39064;&#36716;&#25442;&#20026;&quot;&#21024;&#38500;&#21518;&#32487;&#33410;&#28857;&quot;&#30340;&#24773;&#20917;&#20102;&#65292;&#19979;&#38754;&#23601;&#32771;&#34385;&#21518;&#32487;&#33410;&#28857;&#12290; &#22312;&quot;&#34987;&#21024;&#38500;&#33410;&#28857;&quot;&#26377;&#20004;&#20010;&#38750;&#31354;&#23376;&#33410;&#28857;&#30340;&#24773;&#20917;&#19979;&#65292;&#23427;&#30340;&#21518;&#32487;&#33410;&#28857;&#19981;&#21487;&#33021;&#26159;&#21452;&#23376;&#38750;&#31354;&#12290;&#26082;&#28982;&quot;&#30340;&#21518;&#32487;&#33410;&#28857;&quot;&#19981;&#21487;&#33021;&#21452;&#23376;&#37117;&#38750;&#31354;&#65292;&#23601;&#24847;&#21619;&#30528;&quot;&#35813;&#33410;&#28857;&#30340;&#21518;&#32487;&#33410;&#28857;&quot;&#35201;&#20040;&#27809;&#26377;&#20799;&#23376;&#65292;&#35201;&#20040;&#21482;&#26377;&#19968;&#20010;&#20799;&#23376;&#12290;&#33509;&#27809;&#26377;&#20799;&#23376;&#65292;&#21017;&#25353;&quot;&#24773;&#20917;&#9312; &quot;&#36827;&#34892;&#22788;&#29702;&#65307;&#33509;&#21482;&#26377;&#19968;&#20010;&#20799;&#23376;&#65292;&#21017;&#25353;&quot;&#24773;&#20917;&#9313; &quot;&#36827;&#34892;&#22788;&#29702;&#12290;</font>
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1575253454445" ID="ID_1656303392" MODIFIED="1575253459691" TEXT="&#x7b2c;&#x4e8c;&#x6b65;&#xff1a;&#x901a;&#x8fc7;&quot;&#x65cb;&#x8f6c;&#x548c;&#x91cd;&#x65b0;&#x7740;&#x8272;&quot;&#x7b49;&#x4e00;&#x7cfb;&#x5217;&#x6765;&#x4fee;&#x6b63;&#x8be5;&#x6811;&#xff0c;&#x4f7f;&#x4e4b;&#x91cd;&#x65b0;&#x6210;&#x4e3a;&#x4e00;&#x68f5;&#x7ea2;&#x9ed1;&#x6811;&#x3002;">
<node CREATED="1575253517557" ID="ID_1154574467" MODIFIED="1575253522392" TEXT="       &#x56e0;&#x4e3a;&quot;&#x7b2c;&#x4e00;&#x6b65;&quot;&#x4e2d;&#x5220;&#x9664;&#x8282;&#x70b9;&#x4e4b;&#x540e;&#xff0c;&#x53ef;&#x80fd;&#x4f1a;&#x8fdd;&#x80cc;&#x7ea2;&#x9ed1;&#x6811;&#x7684;&#x7279;&#x6027;&#x3002;&#x6240;&#x4ee5;&#x9700;&#x8981;&#x901a;&#x8fc7;&quot;&#x65cb;&#x8f6c;&#x548c;&#x91cd;&#x65b0;&#x7740;&#x8272;&quot;&#x6765;&#x4fee;&#x6b63;&#x8be5;&#x6811;&#xff0c;&#x4f7f;&#x4e4b;&#x91cd;&#x65b0;&#x6210;&#x4e3a;&#x4e00;&#x68f5;&#x7ea2;&#x9ed1;&#x6811;&#x3002;"/>
</node>
</node>
<node CREATED="1575253526308" ID="ID_1328303514" MODIFIED="1575253526308" TEXT=""/>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1574762331293" FOLDED="true" ID="ID_1352414108" MODIFIED="1574820409654" POSITION="left" TEXT="do while 0&#x7528;&#x6cd5;">
<node CREATED="1574762344119" FOLDED="true" ID="ID_1130917011" MODIFIED="1574762535970" TEXT="1&#x3001;&#x8f85;&#x52a9;&#x5b9a;&#x4e49;&#x590d;&#x6742;&#x7684;&#x5b8f;&#xff0c;&#x907f;&#x514d;&#x5f15;&#x7528;&#x7684;&#x65f6;&#x5019;&#x51fa;&#x9519;&#xff1a;">
<node CREATED="1574762505750" ID="ID_398630651" MODIFIED="1574762527411">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <div content="text/html; charset=utf-8" http-equiv="content-type" charset="utf-8">
      <div>
        <p>
          &#20030;&#20363;&#26469;&#35828;&#65292;&#20551;&#35774;&#20320;&#38656;&#35201;&#23450;&#20041;&#36825;&#26679;&#19968;&#20010;&#23439;&#65306;
        </p>
        <p>
          #define DOSOMETHING()\
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;foo1();\
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;foo2();
        </p>
        <p>
          &#36825;&#20010;&#23439;&#30340;&#26412;&#24847;&#26159;&#65292;&#24403;&#35843;&#29992;DOSOMETHING()&#26102;&#65292;&#20989;&#25968;foo1()&#21644;foo2()&#37117;&#20250;&#34987;&#35843;&#29992;&#12290;&#20294;&#26159;&#22914;&#26524;&#20320;&#22312;&#35843;&#29992;&#30340;&#26102;&#20505;&#36825;&#20040;&#20889;&#65306;
        </p>
        <p>
          if(a&gt;0)
        </p>
        <p>
          &#160;&#160;&#160;DOSOMETHING();
        </p>
        <p>
          &#22240;&#20026;&#23439;&#22312;&#39044;&#22788;&#29702;&#30340;&#26102;&#20505;&#20250;&#30452;&#25509;&#34987;&#23637;&#24320;&#65292;&#20320;&#23454;&#38469;&#19978;&#20889;&#30340;&#20195;&#30721;&#26159;&#36825;&#20010;&#26679;&#23376;&#30340;&#65306;
        </p>
        <p>
          if(a&gt;0)
        </p>
        <p>
          &#160;&#160;&#160;foo1();
        </p>
        <p>
          foo2();
        </p>
        <p>
          &#36825;&#23601;&#20986;&#29616;&#20102;&#38382;&#39064;&#65292;&#22240;&#20026;&#26080;&#35770;a&#26159;&#21542;&#22823;&#20110;0&#65292;foo2()&#37117;&#20250;&#34987;&#25191;&#34892;&#65292;&#23548;&#33268;&#31243;&#24207;&#20986;&#38169;&#12290;
        </p>
        <p>
          &#37027;&#20040;&#20165;&#20165;&#20351;&#29992;{}&#23558;foo1()&#21644;foo2()&#21253;&#36215;&#26469;&#34892;&#20040;&#65311;
        </p>
        <p>
          &#25105;&#20204;&#22312;&#20889;&#20195;&#30721;&#30340;&#26102;&#20505;&#37117;&#20064;&#24815;&#22312;&#35821;&#21477;&#21491;&#38754;&#21152;&#19978;&#20998;&#21495;&#65292;&#22914;&#26524;&#22312;&#23439;&#20013;&#20351;&#29992;{}&#65292;&#20195;&#30721;&#37324;&#23601;&#30456;&#24403;&#20110;&#36825;&#26679;&#20889;&#20102;&#65306;&#8220;{...};&#8221;&#65292;&#23637;&#24320;&#21518;&#23601;&#26159;&#36825;&#20010;&#26679;&#23376;&#65306;
        </p>
        <p>
          if(a&gt;0){
        </p>
        <p>
          &#160;&#160;&#160;foo1();
        </p>
        <p>
          &#160;&#160;&#160;foo2();};
        </p>
        <p>
          &#36825;&#26679;&#29978;&#33267;&#19981;&#20250;&#32534;&#35793;&#36890;&#36807;&#12290;&#25152;&#20197;&#65292;&#24456;&#22810;&#20154;&#25165;&#37319;&#29992;&#20102;do{...}while(0);
        </p>
        <p>
          #define DOSOMETHING() \
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;do{ \
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;foo1();\
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;foo2();\
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;}while(0)\
        </p>
        <p>
          ...
        </p>
        <p>
          if(a&gt;0)
        </p>
        <p>
          &#160;&#160;&#160;DOSOMETHING();
        </p>
        <p>
          ...
        </p>
        <p>
          &#36825;&#26679;&#65292;&#23439;&#34987;&#23637;&#24320;&#21518;&#65292;&#25165;&#20250;&#20445;&#30041;&#21021;&#22987;&#30340;&#35821;&#20041;&#12290;GCC&#25552;&#20379;&#20102;Statement-Expressions&#29992;&#20197;&#26367;&#20195;do{...}while(0); &#25152;&#20197;&#20320;&#20063;&#21487;&#20197;&#36825;&#26679;&#23450;&#20041;&#23439;&#65306;
        </p>
        <p>
          #define DOSOMETHING() ({\
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;foo1(); \
        </p>
        <p>
          &#160;&#160;&#160;&#160;&#160;&#160;&#160;foo2(); \
        </p>
        <p>
          })
        </p>
      </div>
    </div>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574762537054" FOLDED="true" ID="ID_663004245" MODIFIED="1574762636385" TEXT="2&#x3001;&#x907f;&#x514d;&#x4f7f;&#x7528;goto&#x5bf9;&#x7a0b;&#x5e8f;&#x6d41;&#x8fdb;&#x884c;&#x7edf;&#x4e00;&#x7684;&#x63a7;&#x5236;&#xff1a;">
<font NAME="SansSerif" SIZE="12"/>
<node CREATED="1574762546974" ID="ID_1592862730" MODIFIED="1574762630193">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <div content="text/html; charset=utf-8" http-equiv="content-type" charset="utf-8">
      <div>
        <p>
          &#26377;&#20123;&#20989;&#25968;&#20013;&#65292;&#22312;&#20989;&#25968;return&#20043;&#21069;&#25105;&#20204;&#32463;&#24120;&#20250;&#36827;&#34892;&#19968;&#20123;&#25910;&#23614;&#30340;&#24037;&#20316;&#65292;&#27604;&#22914;free&#25481;&#19968;&#22359;&#20989;&#25968;&#24320;&#22987;malloc&#30340;&#20869;&#23384;&#65292;goto&#19968;&#30452;&#37117;&#26159;&#19968;&#20010;&#27604;&#36739;&#31616;&#20415;&#30340;&#26041;&#27861;&#65306;
        </p>
        <p>
          int foo(){
        </p>
        <p>
          somestruct* ptr = malloc(...);
        </p>
        <p>
          <br />
          
        </p>
        <p>
          dosomething...;if(error)
        </p>
        <p>
          {goto END;}<br />
        </p>
        <p>
          dosomething...;if(error)
        </p>
        <p>
          {goto END;}
        </p>
        <p>
          dosomething...;<br />
        </p>
        <p>
          END:
        </p>
        <p>
          free(ptr);return0;}
        </p>
        <p>
          &#30001;&#20110;goto&#19981;&#31526;&#21512;&#36719;&#20214;&#24037;&#31243;&#30340;&#32467;&#26500;&#21270;&#65292;&#32780;&#19988;&#26377;&#21487;&#33021;&#20351;&#24471;&#20195;&#30721;&#38590;&#25026;&#65292;&#25152;&#20197;&#24456;&#22810;&#20154;&#37117;&#19981;&#20513;&#23548;&#20351;&#29992;&#65292;&#37027;&#36825;&#20010;&#26102;&#20505;&#23601;&#21487;&#20197;&#29992;do{}while(0)&#26469;&#36827;&#34892;&#32479;&#19968;&#30340;&#31649;&#29702;&#65306;
        </p>
        <p>
          int foo(){<br />
        </p>
        <p>
          somestruct* ptr = malloc(...);
        </p>
        <p>
          do{
        </p>
        <p>
          dosomething...;
        </p>
        <p>
          if(error)
        </p>
        <p>
          {break;}<br />
        </p>
        <p>
          dosomething...;
        </p>
        <p>
          if(error){break;}
        </p>
        <p>
          dosomething...;
        </p>
        <p>
          }while(0);<br />
        </p>
        <p>
          free(ptr);
        </p>
        <p>
          return0;}
        </p>
        <p>
          &#36825;&#37324;&#23558;&#20989;&#25968;&#20027;&#20307;&#20351;&#29992;do()while(0)&#21253;&#21547;&#36215;&#26469;&#65292;&#20351;&#29992;break&#26469;&#20195;&#26367;goto&#65292;&#21518;&#32493;&#30340;&#22788;&#29702;&#24037;&#20316;&#22312;while&#20043;&#21518;&#65292;&#23601;&#33021;&#22815;&#36798;&#21040;&#21516;&#26679;&#30340;&#25928;&#26524;&#12290;
        </p>
      </div>
    </div>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574762636949" ID="ID_830862209" MODIFIED="1574762644865" TEXT="3&#x3001;&#x907f;&#x514d;&#x7a7a;&#x5b8f;&#x5f15;&#x8d77;&#x7684;warning">
<node CREATED="1574762647070" ID="ID_1651581072" MODIFIED="1574762658373">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <div content="text/html; charset=utf-8" http-equiv="content-type" charset="utf-8">
      <div>
        <p>
          &#20869;&#26680;&#20013;&#30001;&#20110;&#19981;&#21516;&#26550;&#26500;&#30340;&#38480;&#21046;&#65292;&#24456;&#22810;&#26102;&#20505;&#20250;&#29992;&#21040;&#31354;&#23439;&#65292;&#22312;&#32534;&#35793;&#30340;&#26102;&#20505;&#65292;&#31354;&#23439;&#20250;&#32473;&#20986;warning&#65292;&#20026;&#20102;&#36991;&#20813;&#36825;&#26679;&#30340;warning&#65292;&#23601;&#21487;&#20197;&#20351;&#29992;do{}while(0)&#26469;&#23450;&#20041;&#31354;&#23439;&#65306;
        </p>
        <p>
          #define EMPTYMICRO do{}while(0)
        </p>
      </div>
    </div>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1574762674109" ID="ID_1345219751" MODIFIED="1574762675650" TEXT="4&#x3001;&#x5b9a;&#x4e49;&#x4e00;&#x4e2a;&#x5355;&#x72ec;&#x7684;&#x51fd;&#x6570;&#x5757;&#x6765;&#x5b9e;&#x73b0;&#x590d;&#x6742;&#x7684;&#x64cd;&#x4f5c;&#xff1a;">
<node CREATED="1574762676262" ID="ID_1401123995" MODIFIED="1574762698909">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24403;&#20320;&#30340;&#21151;&#33021;&#24456;&#22797;&#26434;&#65292;&#21464;&#37327;&#24456;&#22810;&#20320;&#21448;&#19981;&#24895;&#24847;&#22686;&#21152;&#19968;&#20010;&#20989;&#25968;&#30340;&#26102;&#20505;&#65292;
    </p>
    <p>
      &#20351;&#29992;do{}while(0);&#65292;&#23558;&#20320;&#30340;&#20195;&#30721;&#20889;&#22312;&#37324;&#38754;&#65292;&#37324;&#38754;&#21487;&#20197;&#23450;&#20041;&#21464;&#37327;&#32780;
    </p>
    <p>
      &#19981;&#29992;&#32771;&#34385;&#21464;&#37327;&#21517;&#20250;&#21516;&#20989;&#25968;&#20043;&#21069;&#25110;&#32773;&#20043;&#21518;&#30340;&#37325;&#22797;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</map>
